
I2C_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003684  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003834  08003834  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003834  08003834  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003834  08003834  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800383c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  2000000c  08003848  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  08003848  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006479  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000143a  00000000  00000000  000264ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  000278e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  00027f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010457  00000000  00000000  00028540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c47  00000000  00000000  00038997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064bf6  00000000  00000000  000415de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a61d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000171c  00000000  00000000  000a6224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800372c 	.word	0x0800372c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800372c 	.word	0x0800372c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fadd>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	46c6      	mov	lr, r8
 8000224:	0243      	lsls	r3, r0, #9
 8000226:	0a5b      	lsrs	r3, r3, #9
 8000228:	024e      	lsls	r6, r1, #9
 800022a:	0045      	lsls	r5, r0, #1
 800022c:	004f      	lsls	r7, r1, #1
 800022e:	00da      	lsls	r2, r3, #3
 8000230:	0fc4      	lsrs	r4, r0, #31
 8000232:	469c      	mov	ip, r3
 8000234:	0a70      	lsrs	r0, r6, #9
 8000236:	4690      	mov	r8, r2
 8000238:	b500      	push	{lr}
 800023a:	0e2d      	lsrs	r5, r5, #24
 800023c:	0e3f      	lsrs	r7, r7, #24
 800023e:	0fc9      	lsrs	r1, r1, #31
 8000240:	09b6      	lsrs	r6, r6, #6
 8000242:	428c      	cmp	r4, r1
 8000244:	d04b      	beq.n	80002de <__aeabi_fadd+0xbe>
 8000246:	1bea      	subs	r2, r5, r7
 8000248:	2a00      	cmp	r2, #0
 800024a:	dd36      	ble.n	80002ba <__aeabi_fadd+0x9a>
 800024c:	2f00      	cmp	r7, #0
 800024e:	d061      	beq.n	8000314 <__aeabi_fadd+0xf4>
 8000250:	2dff      	cmp	r5, #255	; 0xff
 8000252:	d100      	bne.n	8000256 <__aeabi_fadd+0x36>
 8000254:	e0ad      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	04db      	lsls	r3, r3, #19
 800025a:	431e      	orrs	r6, r3
 800025c:	2a1b      	cmp	r2, #27
 800025e:	dc00      	bgt.n	8000262 <__aeabi_fadd+0x42>
 8000260:	e0d3      	b.n	800040a <__aeabi_fadd+0x1ea>
 8000262:	2001      	movs	r0, #1
 8000264:	4643      	mov	r3, r8
 8000266:	1a18      	subs	r0, r3, r0
 8000268:	0143      	lsls	r3, r0, #5
 800026a:	d400      	bmi.n	800026e <__aeabi_fadd+0x4e>
 800026c:	e08c      	b.n	8000388 <__aeabi_fadd+0x168>
 800026e:	0180      	lsls	r0, r0, #6
 8000270:	0987      	lsrs	r7, r0, #6
 8000272:	0038      	movs	r0, r7
 8000274:	f000 fe38 	bl	8000ee8 <__clzsi2>
 8000278:	3805      	subs	r0, #5
 800027a:	4087      	lsls	r7, r0
 800027c:	4285      	cmp	r5, r0
 800027e:	dc00      	bgt.n	8000282 <__aeabi_fadd+0x62>
 8000280:	e0b6      	b.n	80003f0 <__aeabi_fadd+0x1d0>
 8000282:	1a2d      	subs	r5, r5, r0
 8000284:	48b3      	ldr	r0, [pc, #716]	; (8000554 <__aeabi_fadd+0x334>)
 8000286:	4038      	ands	r0, r7
 8000288:	0743      	lsls	r3, r0, #29
 800028a:	d004      	beq.n	8000296 <__aeabi_fadd+0x76>
 800028c:	230f      	movs	r3, #15
 800028e:	4003      	ands	r3, r0
 8000290:	2b04      	cmp	r3, #4
 8000292:	d000      	beq.n	8000296 <__aeabi_fadd+0x76>
 8000294:	3004      	adds	r0, #4
 8000296:	0143      	lsls	r3, r0, #5
 8000298:	d400      	bmi.n	800029c <__aeabi_fadd+0x7c>
 800029a:	e078      	b.n	800038e <__aeabi_fadd+0x16e>
 800029c:	1c6a      	adds	r2, r5, #1
 800029e:	2dfe      	cmp	r5, #254	; 0xfe
 80002a0:	d065      	beq.n	800036e <__aeabi_fadd+0x14e>
 80002a2:	0180      	lsls	r0, r0, #6
 80002a4:	0a43      	lsrs	r3, r0, #9
 80002a6:	469c      	mov	ip, r3
 80002a8:	b2d2      	uxtb	r2, r2
 80002aa:	4663      	mov	r3, ip
 80002ac:	05d0      	lsls	r0, r2, #23
 80002ae:	4318      	orrs	r0, r3
 80002b0:	07e4      	lsls	r4, r4, #31
 80002b2:	4320      	orrs	r0, r4
 80002b4:	bc80      	pop	{r7}
 80002b6:	46b8      	mov	r8, r7
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d035      	beq.n	800032a <__aeabi_fadd+0x10a>
 80002be:	1b7a      	subs	r2, r7, r5
 80002c0:	2d00      	cmp	r5, #0
 80002c2:	d000      	beq.n	80002c6 <__aeabi_fadd+0xa6>
 80002c4:	e0af      	b.n	8000426 <__aeabi_fadd+0x206>
 80002c6:	4643      	mov	r3, r8
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d100      	bne.n	80002ce <__aeabi_fadd+0xae>
 80002cc:	e0a7      	b.n	800041e <__aeabi_fadd+0x1fe>
 80002ce:	1e53      	subs	r3, r2, #1
 80002d0:	2a01      	cmp	r2, #1
 80002d2:	d100      	bne.n	80002d6 <__aeabi_fadd+0xb6>
 80002d4:	e12f      	b.n	8000536 <__aeabi_fadd+0x316>
 80002d6:	2aff      	cmp	r2, #255	; 0xff
 80002d8:	d069      	beq.n	80003ae <__aeabi_fadd+0x18e>
 80002da:	001a      	movs	r2, r3
 80002dc:	e0aa      	b.n	8000434 <__aeabi_fadd+0x214>
 80002de:	1be9      	subs	r1, r5, r7
 80002e0:	2900      	cmp	r1, #0
 80002e2:	dd70      	ble.n	80003c6 <__aeabi_fadd+0x1a6>
 80002e4:	2f00      	cmp	r7, #0
 80002e6:	d037      	beq.n	8000358 <__aeabi_fadd+0x138>
 80002e8:	2dff      	cmp	r5, #255	; 0xff
 80002ea:	d062      	beq.n	80003b2 <__aeabi_fadd+0x192>
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	04db      	lsls	r3, r3, #19
 80002f0:	431e      	orrs	r6, r3
 80002f2:	291b      	cmp	r1, #27
 80002f4:	dc00      	bgt.n	80002f8 <__aeabi_fadd+0xd8>
 80002f6:	e0b0      	b.n	800045a <__aeabi_fadd+0x23a>
 80002f8:	2001      	movs	r0, #1
 80002fa:	4440      	add	r0, r8
 80002fc:	0143      	lsls	r3, r0, #5
 80002fe:	d543      	bpl.n	8000388 <__aeabi_fadd+0x168>
 8000300:	3501      	adds	r5, #1
 8000302:	2dff      	cmp	r5, #255	; 0xff
 8000304:	d033      	beq.n	800036e <__aeabi_fadd+0x14e>
 8000306:	2301      	movs	r3, #1
 8000308:	4a93      	ldr	r2, [pc, #588]	; (8000558 <__aeabi_fadd+0x338>)
 800030a:	4003      	ands	r3, r0
 800030c:	0840      	lsrs	r0, r0, #1
 800030e:	4010      	ands	r0, r2
 8000310:	4318      	orrs	r0, r3
 8000312:	e7b9      	b.n	8000288 <__aeabi_fadd+0x68>
 8000314:	2e00      	cmp	r6, #0
 8000316:	d100      	bne.n	800031a <__aeabi_fadd+0xfa>
 8000318:	e083      	b.n	8000422 <__aeabi_fadd+0x202>
 800031a:	1e51      	subs	r1, r2, #1
 800031c:	2a01      	cmp	r2, #1
 800031e:	d100      	bne.n	8000322 <__aeabi_fadd+0x102>
 8000320:	e0d8      	b.n	80004d4 <__aeabi_fadd+0x2b4>
 8000322:	2aff      	cmp	r2, #255	; 0xff
 8000324:	d045      	beq.n	80003b2 <__aeabi_fadd+0x192>
 8000326:	000a      	movs	r2, r1
 8000328:	e798      	b.n	800025c <__aeabi_fadd+0x3c>
 800032a:	27fe      	movs	r7, #254	; 0xfe
 800032c:	1c6a      	adds	r2, r5, #1
 800032e:	4217      	tst	r7, r2
 8000330:	d000      	beq.n	8000334 <__aeabi_fadd+0x114>
 8000332:	e086      	b.n	8000442 <__aeabi_fadd+0x222>
 8000334:	2d00      	cmp	r5, #0
 8000336:	d000      	beq.n	800033a <__aeabi_fadd+0x11a>
 8000338:	e0b7      	b.n	80004aa <__aeabi_fadd+0x28a>
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_fadd+0x122>
 8000340:	e0f3      	b.n	800052a <__aeabi_fadd+0x30a>
 8000342:	2200      	movs	r2, #0
 8000344:	2e00      	cmp	r6, #0
 8000346:	d0b0      	beq.n	80002aa <__aeabi_fadd+0x8a>
 8000348:	1b98      	subs	r0, r3, r6
 800034a:	0143      	lsls	r3, r0, #5
 800034c:	d400      	bmi.n	8000350 <__aeabi_fadd+0x130>
 800034e:	e0fa      	b.n	8000546 <__aeabi_fadd+0x326>
 8000350:	4643      	mov	r3, r8
 8000352:	000c      	movs	r4, r1
 8000354:	1af0      	subs	r0, r6, r3
 8000356:	e797      	b.n	8000288 <__aeabi_fadd+0x68>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d100      	bne.n	800035e <__aeabi_fadd+0x13e>
 800035c:	e0c8      	b.n	80004f0 <__aeabi_fadd+0x2d0>
 800035e:	1e4a      	subs	r2, r1, #1
 8000360:	2901      	cmp	r1, #1
 8000362:	d100      	bne.n	8000366 <__aeabi_fadd+0x146>
 8000364:	e0ae      	b.n	80004c4 <__aeabi_fadd+0x2a4>
 8000366:	29ff      	cmp	r1, #255	; 0xff
 8000368:	d023      	beq.n	80003b2 <__aeabi_fadd+0x192>
 800036a:	0011      	movs	r1, r2
 800036c:	e7c1      	b.n	80002f2 <__aeabi_fadd+0xd2>
 800036e:	2300      	movs	r3, #0
 8000370:	22ff      	movs	r2, #255	; 0xff
 8000372:	469c      	mov	ip, r3
 8000374:	e799      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000376:	21fe      	movs	r1, #254	; 0xfe
 8000378:	1c6a      	adds	r2, r5, #1
 800037a:	4211      	tst	r1, r2
 800037c:	d077      	beq.n	800046e <__aeabi_fadd+0x24e>
 800037e:	2aff      	cmp	r2, #255	; 0xff
 8000380:	d0f5      	beq.n	800036e <__aeabi_fadd+0x14e>
 8000382:	0015      	movs	r5, r2
 8000384:	4446      	add	r6, r8
 8000386:	0870      	lsrs	r0, r6, #1
 8000388:	0743      	lsls	r3, r0, #29
 800038a:	d000      	beq.n	800038e <__aeabi_fadd+0x16e>
 800038c:	e77e      	b.n	800028c <__aeabi_fadd+0x6c>
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	2dff      	cmp	r5, #255	; 0xff
 8000392:	d00e      	beq.n	80003b2 <__aeabi_fadd+0x192>
 8000394:	025b      	lsls	r3, r3, #9
 8000396:	0a5b      	lsrs	r3, r3, #9
 8000398:	469c      	mov	ip, r3
 800039a:	b2ea      	uxtb	r2, r5
 800039c:	e785      	b.n	80002aa <__aeabi_fadd+0x8a>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d007      	beq.n	80003b2 <__aeabi_fadd+0x192>
 80003a2:	2280      	movs	r2, #128	; 0x80
 80003a4:	03d2      	lsls	r2, r2, #15
 80003a6:	4213      	tst	r3, r2
 80003a8:	d003      	beq.n	80003b2 <__aeabi_fadd+0x192>
 80003aa:	4210      	tst	r0, r2
 80003ac:	d101      	bne.n	80003b2 <__aeabi_fadd+0x192>
 80003ae:	000c      	movs	r4, r1
 80003b0:	0003      	movs	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0db      	beq.n	800036e <__aeabi_fadd+0x14e>
 80003b6:	2080      	movs	r0, #128	; 0x80
 80003b8:	03c0      	lsls	r0, r0, #15
 80003ba:	4318      	orrs	r0, r3
 80003bc:	0240      	lsls	r0, r0, #9
 80003be:	0a43      	lsrs	r3, r0, #9
 80003c0:	469c      	mov	ip, r3
 80003c2:	22ff      	movs	r2, #255	; 0xff
 80003c4:	e771      	b.n	80002aa <__aeabi_fadd+0x8a>
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d0d5      	beq.n	8000376 <__aeabi_fadd+0x156>
 80003ca:	1b7a      	subs	r2, r7, r5
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	d160      	bne.n	8000492 <__aeabi_fadd+0x272>
 80003d0:	4643      	mov	r3, r8
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d024      	beq.n	8000420 <__aeabi_fadd+0x200>
 80003d6:	1e53      	subs	r3, r2, #1
 80003d8:	2a01      	cmp	r2, #1
 80003da:	d073      	beq.n	80004c4 <__aeabi_fadd+0x2a4>
 80003dc:	2aff      	cmp	r2, #255	; 0xff
 80003de:	d0e7      	beq.n	80003b0 <__aeabi_fadd+0x190>
 80003e0:	001a      	movs	r2, r3
 80003e2:	2a1b      	cmp	r2, #27
 80003e4:	dc00      	bgt.n	80003e8 <__aeabi_fadd+0x1c8>
 80003e6:	e085      	b.n	80004f4 <__aeabi_fadd+0x2d4>
 80003e8:	2001      	movs	r0, #1
 80003ea:	003d      	movs	r5, r7
 80003ec:	1980      	adds	r0, r0, r6
 80003ee:	e785      	b.n	80002fc <__aeabi_fadd+0xdc>
 80003f0:	2320      	movs	r3, #32
 80003f2:	003a      	movs	r2, r7
 80003f4:	1b45      	subs	r5, r0, r5
 80003f6:	0038      	movs	r0, r7
 80003f8:	3501      	adds	r5, #1
 80003fa:	40ea      	lsrs	r2, r5
 80003fc:	1b5d      	subs	r5, r3, r5
 80003fe:	40a8      	lsls	r0, r5
 8000400:	1e43      	subs	r3, r0, #1
 8000402:	4198      	sbcs	r0, r3
 8000404:	2500      	movs	r5, #0
 8000406:	4310      	orrs	r0, r2
 8000408:	e73e      	b.n	8000288 <__aeabi_fadd+0x68>
 800040a:	2320      	movs	r3, #32
 800040c:	0030      	movs	r0, r6
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	0031      	movs	r1, r6
 8000412:	4098      	lsls	r0, r3
 8000414:	40d1      	lsrs	r1, r2
 8000416:	1e43      	subs	r3, r0, #1
 8000418:	4198      	sbcs	r0, r3
 800041a:	4308      	orrs	r0, r1
 800041c:	e722      	b.n	8000264 <__aeabi_fadd+0x44>
 800041e:	000c      	movs	r4, r1
 8000420:	0003      	movs	r3, r0
 8000422:	0015      	movs	r5, r2
 8000424:	e7b4      	b.n	8000390 <__aeabi_fadd+0x170>
 8000426:	2fff      	cmp	r7, #255	; 0xff
 8000428:	d0c1      	beq.n	80003ae <__aeabi_fadd+0x18e>
 800042a:	2380      	movs	r3, #128	; 0x80
 800042c:	4640      	mov	r0, r8
 800042e:	04db      	lsls	r3, r3, #19
 8000430:	4318      	orrs	r0, r3
 8000432:	4680      	mov	r8, r0
 8000434:	2a1b      	cmp	r2, #27
 8000436:	dd51      	ble.n	80004dc <__aeabi_fadd+0x2bc>
 8000438:	2001      	movs	r0, #1
 800043a:	000c      	movs	r4, r1
 800043c:	003d      	movs	r5, r7
 800043e:	1a30      	subs	r0, r6, r0
 8000440:	e712      	b.n	8000268 <__aeabi_fadd+0x48>
 8000442:	4643      	mov	r3, r8
 8000444:	1b9f      	subs	r7, r3, r6
 8000446:	017b      	lsls	r3, r7, #5
 8000448:	d42b      	bmi.n	80004a2 <__aeabi_fadd+0x282>
 800044a:	2f00      	cmp	r7, #0
 800044c:	d000      	beq.n	8000450 <__aeabi_fadd+0x230>
 800044e:	e710      	b.n	8000272 <__aeabi_fadd+0x52>
 8000450:	2300      	movs	r3, #0
 8000452:	2400      	movs	r4, #0
 8000454:	2200      	movs	r2, #0
 8000456:	469c      	mov	ip, r3
 8000458:	e727      	b.n	80002aa <__aeabi_fadd+0x8a>
 800045a:	2320      	movs	r3, #32
 800045c:	0032      	movs	r2, r6
 800045e:	0030      	movs	r0, r6
 8000460:	40ca      	lsrs	r2, r1
 8000462:	1a59      	subs	r1, r3, r1
 8000464:	4088      	lsls	r0, r1
 8000466:	1e43      	subs	r3, r0, #1
 8000468:	4198      	sbcs	r0, r3
 800046a:	4310      	orrs	r0, r2
 800046c:	e745      	b.n	80002fa <__aeabi_fadd+0xda>
 800046e:	2d00      	cmp	r5, #0
 8000470:	d14a      	bne.n	8000508 <__aeabi_fadd+0x2e8>
 8000472:	4643      	mov	r3, r8
 8000474:	2b00      	cmp	r3, #0
 8000476:	d063      	beq.n	8000540 <__aeabi_fadd+0x320>
 8000478:	2200      	movs	r2, #0
 800047a:	2e00      	cmp	r6, #0
 800047c:	d100      	bne.n	8000480 <__aeabi_fadd+0x260>
 800047e:	e714      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000480:	0030      	movs	r0, r6
 8000482:	4440      	add	r0, r8
 8000484:	0143      	lsls	r3, r0, #5
 8000486:	d400      	bmi.n	800048a <__aeabi_fadd+0x26a>
 8000488:	e77e      	b.n	8000388 <__aeabi_fadd+0x168>
 800048a:	4b32      	ldr	r3, [pc, #200]	; (8000554 <__aeabi_fadd+0x334>)
 800048c:	3501      	adds	r5, #1
 800048e:	4018      	ands	r0, r3
 8000490:	e77a      	b.n	8000388 <__aeabi_fadd+0x168>
 8000492:	2fff      	cmp	r7, #255	; 0xff
 8000494:	d08c      	beq.n	80003b0 <__aeabi_fadd+0x190>
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	4641      	mov	r1, r8
 800049a:	04db      	lsls	r3, r3, #19
 800049c:	4319      	orrs	r1, r3
 800049e:	4688      	mov	r8, r1
 80004a0:	e79f      	b.n	80003e2 <__aeabi_fadd+0x1c2>
 80004a2:	4643      	mov	r3, r8
 80004a4:	000c      	movs	r4, r1
 80004a6:	1af7      	subs	r7, r6, r3
 80004a8:	e6e3      	b.n	8000272 <__aeabi_fadd+0x52>
 80004aa:	4642      	mov	r2, r8
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d000      	beq.n	80004b2 <__aeabi_fadd+0x292>
 80004b0:	e775      	b.n	800039e <__aeabi_fadd+0x17e>
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	d000      	beq.n	80004b8 <__aeabi_fadd+0x298>
 80004b6:	e77a      	b.n	80003ae <__aeabi_fadd+0x18e>
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	03db      	lsls	r3, r3, #15
 80004bc:	2400      	movs	r4, #0
 80004be:	469c      	mov	ip, r3
 80004c0:	22ff      	movs	r2, #255	; 0xff
 80004c2:	e6f2      	b.n	80002aa <__aeabi_fadd+0x8a>
 80004c4:	0030      	movs	r0, r6
 80004c6:	4440      	add	r0, r8
 80004c8:	2501      	movs	r5, #1
 80004ca:	0143      	lsls	r3, r0, #5
 80004cc:	d400      	bmi.n	80004d0 <__aeabi_fadd+0x2b0>
 80004ce:	e75b      	b.n	8000388 <__aeabi_fadd+0x168>
 80004d0:	2502      	movs	r5, #2
 80004d2:	e718      	b.n	8000306 <__aeabi_fadd+0xe6>
 80004d4:	4643      	mov	r3, r8
 80004d6:	2501      	movs	r5, #1
 80004d8:	1b98      	subs	r0, r3, r6
 80004da:	e6c5      	b.n	8000268 <__aeabi_fadd+0x48>
 80004dc:	2320      	movs	r3, #32
 80004de:	4644      	mov	r4, r8
 80004e0:	4640      	mov	r0, r8
 80004e2:	40d4      	lsrs	r4, r2
 80004e4:	1a9a      	subs	r2, r3, r2
 80004e6:	4090      	lsls	r0, r2
 80004e8:	1e43      	subs	r3, r0, #1
 80004ea:	4198      	sbcs	r0, r3
 80004ec:	4320      	orrs	r0, r4
 80004ee:	e7a4      	b.n	800043a <__aeabi_fadd+0x21a>
 80004f0:	000d      	movs	r5, r1
 80004f2:	e74d      	b.n	8000390 <__aeabi_fadd+0x170>
 80004f4:	2320      	movs	r3, #32
 80004f6:	4641      	mov	r1, r8
 80004f8:	4640      	mov	r0, r8
 80004fa:	40d1      	lsrs	r1, r2
 80004fc:	1a9a      	subs	r2, r3, r2
 80004fe:	4090      	lsls	r0, r2
 8000500:	1e43      	subs	r3, r0, #1
 8000502:	4198      	sbcs	r0, r3
 8000504:	4308      	orrs	r0, r1
 8000506:	e770      	b.n	80003ea <__aeabi_fadd+0x1ca>
 8000508:	4642      	mov	r2, r8
 800050a:	2a00      	cmp	r2, #0
 800050c:	d100      	bne.n	8000510 <__aeabi_fadd+0x2f0>
 800050e:	e74f      	b.n	80003b0 <__aeabi_fadd+0x190>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x2f6>
 8000514:	e74d      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	03d2      	lsls	r2, r2, #15
 800051a:	4213      	tst	r3, r2
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x300>
 800051e:	e748      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000520:	4210      	tst	r0, r2
 8000522:	d000      	beq.n	8000526 <__aeabi_fadd+0x306>
 8000524:	e745      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000526:	0003      	movs	r3, r0
 8000528:	e743      	b.n	80003b2 <__aeabi_fadd+0x192>
 800052a:	2e00      	cmp	r6, #0
 800052c:	d090      	beq.n	8000450 <__aeabi_fadd+0x230>
 800052e:	000c      	movs	r4, r1
 8000530:	4684      	mov	ip, r0
 8000532:	2200      	movs	r2, #0
 8000534:	e6b9      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000536:	4643      	mov	r3, r8
 8000538:	000c      	movs	r4, r1
 800053a:	1af0      	subs	r0, r6, r3
 800053c:	3501      	adds	r5, #1
 800053e:	e693      	b.n	8000268 <__aeabi_fadd+0x48>
 8000540:	4684      	mov	ip, r0
 8000542:	2200      	movs	r2, #0
 8000544:	e6b1      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000546:	2800      	cmp	r0, #0
 8000548:	d000      	beq.n	800054c <__aeabi_fadd+0x32c>
 800054a:	e71d      	b.n	8000388 <__aeabi_fadd+0x168>
 800054c:	2300      	movs	r3, #0
 800054e:	2400      	movs	r4, #0
 8000550:	469c      	mov	ip, r3
 8000552:	e6aa      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000554:	fbffffff 	.word	0xfbffffff
 8000558:	7dffffff 	.word	0x7dffffff

0800055c <__aeabi_fdiv>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	464f      	mov	r7, r9
 8000560:	4646      	mov	r6, r8
 8000562:	46d6      	mov	lr, sl
 8000564:	0245      	lsls	r5, r0, #9
 8000566:	b5c0      	push	{r6, r7, lr}
 8000568:	0047      	lsls	r7, r0, #1
 800056a:	1c0c      	adds	r4, r1, #0
 800056c:	0a6d      	lsrs	r5, r5, #9
 800056e:	0e3f      	lsrs	r7, r7, #24
 8000570:	0fc6      	lsrs	r6, r0, #31
 8000572:	2f00      	cmp	r7, #0
 8000574:	d100      	bne.n	8000578 <__aeabi_fdiv+0x1c>
 8000576:	e070      	b.n	800065a <__aeabi_fdiv+0xfe>
 8000578:	2fff      	cmp	r7, #255	; 0xff
 800057a:	d100      	bne.n	800057e <__aeabi_fdiv+0x22>
 800057c:	e075      	b.n	800066a <__aeabi_fdiv+0x10e>
 800057e:	00eb      	lsls	r3, r5, #3
 8000580:	2580      	movs	r5, #128	; 0x80
 8000582:	04ed      	lsls	r5, r5, #19
 8000584:	431d      	orrs	r5, r3
 8000586:	2300      	movs	r3, #0
 8000588:	4699      	mov	r9, r3
 800058a:	469a      	mov	sl, r3
 800058c:	3f7f      	subs	r7, #127	; 0x7f
 800058e:	0260      	lsls	r0, r4, #9
 8000590:	0a43      	lsrs	r3, r0, #9
 8000592:	4698      	mov	r8, r3
 8000594:	0063      	lsls	r3, r4, #1
 8000596:	0e1b      	lsrs	r3, r3, #24
 8000598:	0fe4      	lsrs	r4, r4, #31
 800059a:	2b00      	cmp	r3, #0
 800059c:	d04e      	beq.n	800063c <__aeabi_fdiv+0xe0>
 800059e:	2bff      	cmp	r3, #255	; 0xff
 80005a0:	d046      	beq.n	8000630 <__aeabi_fdiv+0xd4>
 80005a2:	4642      	mov	r2, r8
 80005a4:	00d0      	lsls	r0, r2, #3
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	04d2      	lsls	r2, r2, #19
 80005aa:	4302      	orrs	r2, r0
 80005ac:	4690      	mov	r8, r2
 80005ae:	2200      	movs	r2, #0
 80005b0:	3b7f      	subs	r3, #127	; 0x7f
 80005b2:	0031      	movs	r1, r6
 80005b4:	1aff      	subs	r7, r7, r3
 80005b6:	464b      	mov	r3, r9
 80005b8:	4061      	eors	r1, r4
 80005ba:	b2c9      	uxtb	r1, r1
 80005bc:	4313      	orrs	r3, r2
 80005be:	2b0f      	cmp	r3, #15
 80005c0:	d900      	bls.n	80005c4 <__aeabi_fdiv+0x68>
 80005c2:	e0b5      	b.n	8000730 <__aeabi_fdiv+0x1d4>
 80005c4:	486e      	ldr	r0, [pc, #440]	; (8000780 <__aeabi_fdiv+0x224>)
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	58c3      	ldr	r3, [r0, r3]
 80005ca:	469f      	mov	pc, r3
 80005cc:	2300      	movs	r3, #0
 80005ce:	4698      	mov	r8, r3
 80005d0:	0026      	movs	r6, r4
 80005d2:	4645      	mov	r5, r8
 80005d4:	4692      	mov	sl, r2
 80005d6:	4653      	mov	r3, sl
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d100      	bne.n	80005de <__aeabi_fdiv+0x82>
 80005dc:	e089      	b.n	80006f2 <__aeabi_fdiv+0x196>
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d100      	bne.n	80005e4 <__aeabi_fdiv+0x88>
 80005e2:	e09e      	b.n	8000722 <__aeabi_fdiv+0x1c6>
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d018      	beq.n	800061a <__aeabi_fdiv+0xbe>
 80005e8:	003b      	movs	r3, r7
 80005ea:	337f      	adds	r3, #127	; 0x7f
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dd69      	ble.n	80006c4 <__aeabi_fdiv+0x168>
 80005f0:	076a      	lsls	r2, r5, #29
 80005f2:	d004      	beq.n	80005fe <__aeabi_fdiv+0xa2>
 80005f4:	220f      	movs	r2, #15
 80005f6:	402a      	ands	r2, r5
 80005f8:	2a04      	cmp	r2, #4
 80005fa:	d000      	beq.n	80005fe <__aeabi_fdiv+0xa2>
 80005fc:	3504      	adds	r5, #4
 80005fe:	012a      	lsls	r2, r5, #4
 8000600:	d503      	bpl.n	800060a <__aeabi_fdiv+0xae>
 8000602:	4b60      	ldr	r3, [pc, #384]	; (8000784 <__aeabi_fdiv+0x228>)
 8000604:	401d      	ands	r5, r3
 8000606:	003b      	movs	r3, r7
 8000608:	3380      	adds	r3, #128	; 0x80
 800060a:	2bfe      	cmp	r3, #254	; 0xfe
 800060c:	dd00      	ble.n	8000610 <__aeabi_fdiv+0xb4>
 800060e:	e070      	b.n	80006f2 <__aeabi_fdiv+0x196>
 8000610:	01ad      	lsls	r5, r5, #6
 8000612:	0a6d      	lsrs	r5, r5, #9
 8000614:	b2d8      	uxtb	r0, r3
 8000616:	e002      	b.n	800061e <__aeabi_fdiv+0xc2>
 8000618:	000e      	movs	r6, r1
 800061a:	2000      	movs	r0, #0
 800061c:	2500      	movs	r5, #0
 800061e:	05c0      	lsls	r0, r0, #23
 8000620:	4328      	orrs	r0, r5
 8000622:	07f6      	lsls	r6, r6, #31
 8000624:	4330      	orrs	r0, r6
 8000626:	bce0      	pop	{r5, r6, r7}
 8000628:	46ba      	mov	sl, r7
 800062a:	46b1      	mov	r9, r6
 800062c:	46a8      	mov	r8, r5
 800062e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000630:	4643      	mov	r3, r8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d13f      	bne.n	80006b6 <__aeabi_fdiv+0x15a>
 8000636:	2202      	movs	r2, #2
 8000638:	3fff      	subs	r7, #255	; 0xff
 800063a:	e003      	b.n	8000644 <__aeabi_fdiv+0xe8>
 800063c:	4643      	mov	r3, r8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d12d      	bne.n	800069e <__aeabi_fdiv+0x142>
 8000642:	2201      	movs	r2, #1
 8000644:	0031      	movs	r1, r6
 8000646:	464b      	mov	r3, r9
 8000648:	4061      	eors	r1, r4
 800064a:	b2c9      	uxtb	r1, r1
 800064c:	4313      	orrs	r3, r2
 800064e:	2b0f      	cmp	r3, #15
 8000650:	d834      	bhi.n	80006bc <__aeabi_fdiv+0x160>
 8000652:	484d      	ldr	r0, [pc, #308]	; (8000788 <__aeabi_fdiv+0x22c>)
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	58c3      	ldr	r3, [r0, r3]
 8000658:	469f      	mov	pc, r3
 800065a:	2d00      	cmp	r5, #0
 800065c:	d113      	bne.n	8000686 <__aeabi_fdiv+0x12a>
 800065e:	2304      	movs	r3, #4
 8000660:	4699      	mov	r9, r3
 8000662:	3b03      	subs	r3, #3
 8000664:	2700      	movs	r7, #0
 8000666:	469a      	mov	sl, r3
 8000668:	e791      	b.n	800058e <__aeabi_fdiv+0x32>
 800066a:	2d00      	cmp	r5, #0
 800066c:	d105      	bne.n	800067a <__aeabi_fdiv+0x11e>
 800066e:	2308      	movs	r3, #8
 8000670:	4699      	mov	r9, r3
 8000672:	3b06      	subs	r3, #6
 8000674:	27ff      	movs	r7, #255	; 0xff
 8000676:	469a      	mov	sl, r3
 8000678:	e789      	b.n	800058e <__aeabi_fdiv+0x32>
 800067a:	230c      	movs	r3, #12
 800067c:	4699      	mov	r9, r3
 800067e:	3b09      	subs	r3, #9
 8000680:	27ff      	movs	r7, #255	; 0xff
 8000682:	469a      	mov	sl, r3
 8000684:	e783      	b.n	800058e <__aeabi_fdiv+0x32>
 8000686:	0028      	movs	r0, r5
 8000688:	f000 fc2e 	bl	8000ee8 <__clzsi2>
 800068c:	2776      	movs	r7, #118	; 0x76
 800068e:	1f43      	subs	r3, r0, #5
 8000690:	409d      	lsls	r5, r3
 8000692:	2300      	movs	r3, #0
 8000694:	427f      	negs	r7, r7
 8000696:	4699      	mov	r9, r3
 8000698:	469a      	mov	sl, r3
 800069a:	1a3f      	subs	r7, r7, r0
 800069c:	e777      	b.n	800058e <__aeabi_fdiv+0x32>
 800069e:	4640      	mov	r0, r8
 80006a0:	f000 fc22 	bl	8000ee8 <__clzsi2>
 80006a4:	4642      	mov	r2, r8
 80006a6:	1f43      	subs	r3, r0, #5
 80006a8:	409a      	lsls	r2, r3
 80006aa:	2376      	movs	r3, #118	; 0x76
 80006ac:	425b      	negs	r3, r3
 80006ae:	4690      	mov	r8, r2
 80006b0:	1a1b      	subs	r3, r3, r0
 80006b2:	2200      	movs	r2, #0
 80006b4:	e77d      	b.n	80005b2 <__aeabi_fdiv+0x56>
 80006b6:	23ff      	movs	r3, #255	; 0xff
 80006b8:	2203      	movs	r2, #3
 80006ba:	e77a      	b.n	80005b2 <__aeabi_fdiv+0x56>
 80006bc:	000e      	movs	r6, r1
 80006be:	20ff      	movs	r0, #255	; 0xff
 80006c0:	2500      	movs	r5, #0
 80006c2:	e7ac      	b.n	800061e <__aeabi_fdiv+0xc2>
 80006c4:	2001      	movs	r0, #1
 80006c6:	1ac0      	subs	r0, r0, r3
 80006c8:	281b      	cmp	r0, #27
 80006ca:	dca6      	bgt.n	800061a <__aeabi_fdiv+0xbe>
 80006cc:	379e      	adds	r7, #158	; 0x9e
 80006ce:	002a      	movs	r2, r5
 80006d0:	40bd      	lsls	r5, r7
 80006d2:	40c2      	lsrs	r2, r0
 80006d4:	1e6b      	subs	r3, r5, #1
 80006d6:	419d      	sbcs	r5, r3
 80006d8:	4315      	orrs	r5, r2
 80006da:	076b      	lsls	r3, r5, #29
 80006dc:	d004      	beq.n	80006e8 <__aeabi_fdiv+0x18c>
 80006de:	230f      	movs	r3, #15
 80006e0:	402b      	ands	r3, r5
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d000      	beq.n	80006e8 <__aeabi_fdiv+0x18c>
 80006e6:	3504      	adds	r5, #4
 80006e8:	016b      	lsls	r3, r5, #5
 80006ea:	d544      	bpl.n	8000776 <__aeabi_fdiv+0x21a>
 80006ec:	2001      	movs	r0, #1
 80006ee:	2500      	movs	r5, #0
 80006f0:	e795      	b.n	800061e <__aeabi_fdiv+0xc2>
 80006f2:	20ff      	movs	r0, #255	; 0xff
 80006f4:	2500      	movs	r5, #0
 80006f6:	e792      	b.n	800061e <__aeabi_fdiv+0xc2>
 80006f8:	2580      	movs	r5, #128	; 0x80
 80006fa:	2600      	movs	r6, #0
 80006fc:	20ff      	movs	r0, #255	; 0xff
 80006fe:	03ed      	lsls	r5, r5, #15
 8000700:	e78d      	b.n	800061e <__aeabi_fdiv+0xc2>
 8000702:	2300      	movs	r3, #0
 8000704:	4698      	mov	r8, r3
 8000706:	2080      	movs	r0, #128	; 0x80
 8000708:	03c0      	lsls	r0, r0, #15
 800070a:	4205      	tst	r5, r0
 800070c:	d009      	beq.n	8000722 <__aeabi_fdiv+0x1c6>
 800070e:	4643      	mov	r3, r8
 8000710:	4203      	tst	r3, r0
 8000712:	d106      	bne.n	8000722 <__aeabi_fdiv+0x1c6>
 8000714:	4645      	mov	r5, r8
 8000716:	4305      	orrs	r5, r0
 8000718:	026d      	lsls	r5, r5, #9
 800071a:	0026      	movs	r6, r4
 800071c:	20ff      	movs	r0, #255	; 0xff
 800071e:	0a6d      	lsrs	r5, r5, #9
 8000720:	e77d      	b.n	800061e <__aeabi_fdiv+0xc2>
 8000722:	2080      	movs	r0, #128	; 0x80
 8000724:	03c0      	lsls	r0, r0, #15
 8000726:	4305      	orrs	r5, r0
 8000728:	026d      	lsls	r5, r5, #9
 800072a:	20ff      	movs	r0, #255	; 0xff
 800072c:	0a6d      	lsrs	r5, r5, #9
 800072e:	e776      	b.n	800061e <__aeabi_fdiv+0xc2>
 8000730:	4642      	mov	r2, r8
 8000732:	016b      	lsls	r3, r5, #5
 8000734:	0150      	lsls	r0, r2, #5
 8000736:	4283      	cmp	r3, r0
 8000738:	d219      	bcs.n	800076e <__aeabi_fdiv+0x212>
 800073a:	221b      	movs	r2, #27
 800073c:	2500      	movs	r5, #0
 800073e:	3f01      	subs	r7, #1
 8000740:	2601      	movs	r6, #1
 8000742:	001c      	movs	r4, r3
 8000744:	006d      	lsls	r5, r5, #1
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	2c00      	cmp	r4, #0
 800074a:	db01      	blt.n	8000750 <__aeabi_fdiv+0x1f4>
 800074c:	4298      	cmp	r0, r3
 800074e:	d801      	bhi.n	8000754 <__aeabi_fdiv+0x1f8>
 8000750:	1a1b      	subs	r3, r3, r0
 8000752:	4335      	orrs	r5, r6
 8000754:	3a01      	subs	r2, #1
 8000756:	2a00      	cmp	r2, #0
 8000758:	d1f3      	bne.n	8000742 <__aeabi_fdiv+0x1e6>
 800075a:	1e5a      	subs	r2, r3, #1
 800075c:	4193      	sbcs	r3, r2
 800075e:	431d      	orrs	r5, r3
 8000760:	003b      	movs	r3, r7
 8000762:	337f      	adds	r3, #127	; 0x7f
 8000764:	000e      	movs	r6, r1
 8000766:	2b00      	cmp	r3, #0
 8000768:	dd00      	ble.n	800076c <__aeabi_fdiv+0x210>
 800076a:	e741      	b.n	80005f0 <__aeabi_fdiv+0x94>
 800076c:	e7aa      	b.n	80006c4 <__aeabi_fdiv+0x168>
 800076e:	221a      	movs	r2, #26
 8000770:	2501      	movs	r5, #1
 8000772:	1a1b      	subs	r3, r3, r0
 8000774:	e7e4      	b.n	8000740 <__aeabi_fdiv+0x1e4>
 8000776:	01ad      	lsls	r5, r5, #6
 8000778:	2000      	movs	r0, #0
 800077a:	0a6d      	lsrs	r5, r5, #9
 800077c:	e74f      	b.n	800061e <__aeabi_fdiv+0xc2>
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	08003764 	.word	0x08003764
 8000784:	f7ffffff 	.word	0xf7ffffff
 8000788:	080037a4 	.word	0x080037a4

0800078c <__aeabi_ddiv>:
 800078c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078e:	4657      	mov	r7, sl
 8000790:	464e      	mov	r6, r9
 8000792:	4645      	mov	r5, r8
 8000794:	46de      	mov	lr, fp
 8000796:	b5e0      	push	{r5, r6, r7, lr}
 8000798:	4681      	mov	r9, r0
 800079a:	0005      	movs	r5, r0
 800079c:	030c      	lsls	r4, r1, #12
 800079e:	0048      	lsls	r0, r1, #1
 80007a0:	4692      	mov	sl, r2
 80007a2:	001f      	movs	r7, r3
 80007a4:	b085      	sub	sp, #20
 80007a6:	0b24      	lsrs	r4, r4, #12
 80007a8:	0d40      	lsrs	r0, r0, #21
 80007aa:	0fce      	lsrs	r6, r1, #31
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d100      	bne.n	80007b2 <__aeabi_ddiv+0x26>
 80007b0:	e156      	b.n	8000a60 <__aeabi_ddiv+0x2d4>
 80007b2:	4bd4      	ldr	r3, [pc, #848]	; (8000b04 <__aeabi_ddiv+0x378>)
 80007b4:	4298      	cmp	r0, r3
 80007b6:	d100      	bne.n	80007ba <__aeabi_ddiv+0x2e>
 80007b8:	e172      	b.n	8000aa0 <__aeabi_ddiv+0x314>
 80007ba:	0f6b      	lsrs	r3, r5, #29
 80007bc:	00e4      	lsls	r4, r4, #3
 80007be:	431c      	orrs	r4, r3
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	041b      	lsls	r3, r3, #16
 80007c4:	4323      	orrs	r3, r4
 80007c6:	4698      	mov	r8, r3
 80007c8:	4bcf      	ldr	r3, [pc, #828]	; (8000b08 <__aeabi_ddiv+0x37c>)
 80007ca:	00ed      	lsls	r5, r5, #3
 80007cc:	469b      	mov	fp, r3
 80007ce:	2300      	movs	r3, #0
 80007d0:	4699      	mov	r9, r3
 80007d2:	4483      	add	fp, r0
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	033c      	lsls	r4, r7, #12
 80007d8:	007b      	lsls	r3, r7, #1
 80007da:	4650      	mov	r0, sl
 80007dc:	0b24      	lsrs	r4, r4, #12
 80007de:	0d5b      	lsrs	r3, r3, #21
 80007e0:	0fff      	lsrs	r7, r7, #31
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_ddiv+0x5c>
 80007e6:	e11f      	b.n	8000a28 <__aeabi_ddiv+0x29c>
 80007e8:	4ac6      	ldr	r2, [pc, #792]	; (8000b04 <__aeabi_ddiv+0x378>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d100      	bne.n	80007f0 <__aeabi_ddiv+0x64>
 80007ee:	e162      	b.n	8000ab6 <__aeabi_ddiv+0x32a>
 80007f0:	49c5      	ldr	r1, [pc, #788]	; (8000b08 <__aeabi_ddiv+0x37c>)
 80007f2:	0f42      	lsrs	r2, r0, #29
 80007f4:	468c      	mov	ip, r1
 80007f6:	00e4      	lsls	r4, r4, #3
 80007f8:	4659      	mov	r1, fp
 80007fa:	4314      	orrs	r4, r2
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	4463      	add	r3, ip
 8000800:	0412      	lsls	r2, r2, #16
 8000802:	1acb      	subs	r3, r1, r3
 8000804:	4314      	orrs	r4, r2
 8000806:	469b      	mov	fp, r3
 8000808:	00c2      	lsls	r2, r0, #3
 800080a:	2000      	movs	r0, #0
 800080c:	0033      	movs	r3, r6
 800080e:	407b      	eors	r3, r7
 8000810:	469a      	mov	sl, r3
 8000812:	464b      	mov	r3, r9
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d827      	bhi.n	8000868 <__aeabi_ddiv+0xdc>
 8000818:	49bc      	ldr	r1, [pc, #752]	; (8000b0c <__aeabi_ddiv+0x380>)
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	58cb      	ldr	r3, [r1, r3]
 800081e:	469f      	mov	pc, r3
 8000820:	46b2      	mov	sl, r6
 8000822:	9b00      	ldr	r3, [sp, #0]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d016      	beq.n	8000856 <__aeabi_ddiv+0xca>
 8000828:	2b03      	cmp	r3, #3
 800082a:	d100      	bne.n	800082e <__aeabi_ddiv+0xa2>
 800082c:	e28e      	b.n	8000d4c <__aeabi_ddiv+0x5c0>
 800082e:	2b01      	cmp	r3, #1
 8000830:	d000      	beq.n	8000834 <__aeabi_ddiv+0xa8>
 8000832:	e0d9      	b.n	80009e8 <__aeabi_ddiv+0x25c>
 8000834:	2300      	movs	r3, #0
 8000836:	2400      	movs	r4, #0
 8000838:	2500      	movs	r5, #0
 800083a:	4652      	mov	r2, sl
 800083c:	051b      	lsls	r3, r3, #20
 800083e:	4323      	orrs	r3, r4
 8000840:	07d2      	lsls	r2, r2, #31
 8000842:	4313      	orrs	r3, r2
 8000844:	0028      	movs	r0, r5
 8000846:	0019      	movs	r1, r3
 8000848:	b005      	add	sp, #20
 800084a:	bcf0      	pop	{r4, r5, r6, r7}
 800084c:	46bb      	mov	fp, r7
 800084e:	46b2      	mov	sl, r6
 8000850:	46a9      	mov	r9, r5
 8000852:	46a0      	mov	r8, r4
 8000854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000856:	2400      	movs	r4, #0
 8000858:	2500      	movs	r5, #0
 800085a:	4baa      	ldr	r3, [pc, #680]	; (8000b04 <__aeabi_ddiv+0x378>)
 800085c:	e7ed      	b.n	800083a <__aeabi_ddiv+0xae>
 800085e:	46ba      	mov	sl, r7
 8000860:	46a0      	mov	r8, r4
 8000862:	0015      	movs	r5, r2
 8000864:	9000      	str	r0, [sp, #0]
 8000866:	e7dc      	b.n	8000822 <__aeabi_ddiv+0x96>
 8000868:	4544      	cmp	r4, r8
 800086a:	d200      	bcs.n	800086e <__aeabi_ddiv+0xe2>
 800086c:	e1c7      	b.n	8000bfe <__aeabi_ddiv+0x472>
 800086e:	d100      	bne.n	8000872 <__aeabi_ddiv+0xe6>
 8000870:	e1c2      	b.n	8000bf8 <__aeabi_ddiv+0x46c>
 8000872:	2301      	movs	r3, #1
 8000874:	425b      	negs	r3, r3
 8000876:	469c      	mov	ip, r3
 8000878:	002e      	movs	r6, r5
 800087a:	4640      	mov	r0, r8
 800087c:	2500      	movs	r5, #0
 800087e:	44e3      	add	fp, ip
 8000880:	0223      	lsls	r3, r4, #8
 8000882:	0e14      	lsrs	r4, r2, #24
 8000884:	431c      	orrs	r4, r3
 8000886:	0c1b      	lsrs	r3, r3, #16
 8000888:	4699      	mov	r9, r3
 800088a:	0423      	lsls	r3, r4, #16
 800088c:	0c1f      	lsrs	r7, r3, #16
 800088e:	0212      	lsls	r2, r2, #8
 8000890:	4649      	mov	r1, r9
 8000892:	9200      	str	r2, [sp, #0]
 8000894:	9701      	str	r7, [sp, #4]
 8000896:	f7ff fcbd 	bl	8000214 <__aeabi_uidivmod>
 800089a:	0002      	movs	r2, r0
 800089c:	437a      	muls	r2, r7
 800089e:	040b      	lsls	r3, r1, #16
 80008a0:	0c31      	lsrs	r1, r6, #16
 80008a2:	4680      	mov	r8, r0
 80008a4:	4319      	orrs	r1, r3
 80008a6:	428a      	cmp	r2, r1
 80008a8:	d907      	bls.n	80008ba <__aeabi_ddiv+0x12e>
 80008aa:	2301      	movs	r3, #1
 80008ac:	425b      	negs	r3, r3
 80008ae:	469c      	mov	ip, r3
 80008b0:	1909      	adds	r1, r1, r4
 80008b2:	44e0      	add	r8, ip
 80008b4:	428c      	cmp	r4, r1
 80008b6:	d800      	bhi.n	80008ba <__aeabi_ddiv+0x12e>
 80008b8:	e207      	b.n	8000cca <__aeabi_ddiv+0x53e>
 80008ba:	1a88      	subs	r0, r1, r2
 80008bc:	4649      	mov	r1, r9
 80008be:	f7ff fca9 	bl	8000214 <__aeabi_uidivmod>
 80008c2:	0409      	lsls	r1, r1, #16
 80008c4:	468c      	mov	ip, r1
 80008c6:	0431      	lsls	r1, r6, #16
 80008c8:	4666      	mov	r6, ip
 80008ca:	9a01      	ldr	r2, [sp, #4]
 80008cc:	0c09      	lsrs	r1, r1, #16
 80008ce:	4342      	muls	r2, r0
 80008d0:	0003      	movs	r3, r0
 80008d2:	4331      	orrs	r1, r6
 80008d4:	428a      	cmp	r2, r1
 80008d6:	d904      	bls.n	80008e2 <__aeabi_ddiv+0x156>
 80008d8:	1909      	adds	r1, r1, r4
 80008da:	3b01      	subs	r3, #1
 80008dc:	428c      	cmp	r4, r1
 80008de:	d800      	bhi.n	80008e2 <__aeabi_ddiv+0x156>
 80008e0:	e1ed      	b.n	8000cbe <__aeabi_ddiv+0x532>
 80008e2:	1a88      	subs	r0, r1, r2
 80008e4:	4642      	mov	r2, r8
 80008e6:	0412      	lsls	r2, r2, #16
 80008e8:	431a      	orrs	r2, r3
 80008ea:	4690      	mov	r8, r2
 80008ec:	4641      	mov	r1, r8
 80008ee:	9b00      	ldr	r3, [sp, #0]
 80008f0:	040e      	lsls	r6, r1, #16
 80008f2:	0c1b      	lsrs	r3, r3, #16
 80008f4:	001f      	movs	r7, r3
 80008f6:	9302      	str	r3, [sp, #8]
 80008f8:	9b00      	ldr	r3, [sp, #0]
 80008fa:	0c36      	lsrs	r6, r6, #16
 80008fc:	041b      	lsls	r3, r3, #16
 80008fe:	0c19      	lsrs	r1, r3, #16
 8000900:	000b      	movs	r3, r1
 8000902:	4373      	muls	r3, r6
 8000904:	0c12      	lsrs	r2, r2, #16
 8000906:	437e      	muls	r6, r7
 8000908:	9103      	str	r1, [sp, #12]
 800090a:	4351      	muls	r1, r2
 800090c:	437a      	muls	r2, r7
 800090e:	0c1f      	lsrs	r7, r3, #16
 8000910:	46bc      	mov	ip, r7
 8000912:	1876      	adds	r6, r6, r1
 8000914:	4466      	add	r6, ip
 8000916:	42b1      	cmp	r1, r6
 8000918:	d903      	bls.n	8000922 <__aeabi_ddiv+0x196>
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	0249      	lsls	r1, r1, #9
 800091e:	468c      	mov	ip, r1
 8000920:	4462      	add	r2, ip
 8000922:	0c31      	lsrs	r1, r6, #16
 8000924:	188a      	adds	r2, r1, r2
 8000926:	0431      	lsls	r1, r6, #16
 8000928:	041e      	lsls	r6, r3, #16
 800092a:	0c36      	lsrs	r6, r6, #16
 800092c:	198e      	adds	r6, r1, r6
 800092e:	4290      	cmp	r0, r2
 8000930:	d302      	bcc.n	8000938 <__aeabi_ddiv+0x1ac>
 8000932:	d112      	bne.n	800095a <__aeabi_ddiv+0x1ce>
 8000934:	42b5      	cmp	r5, r6
 8000936:	d210      	bcs.n	800095a <__aeabi_ddiv+0x1ce>
 8000938:	4643      	mov	r3, r8
 800093a:	1e59      	subs	r1, r3, #1
 800093c:	9b00      	ldr	r3, [sp, #0]
 800093e:	469c      	mov	ip, r3
 8000940:	4465      	add	r5, ip
 8000942:	001f      	movs	r7, r3
 8000944:	429d      	cmp	r5, r3
 8000946:	419b      	sbcs	r3, r3
 8000948:	425b      	negs	r3, r3
 800094a:	191b      	adds	r3, r3, r4
 800094c:	18c0      	adds	r0, r0, r3
 800094e:	4284      	cmp	r4, r0
 8000950:	d200      	bcs.n	8000954 <__aeabi_ddiv+0x1c8>
 8000952:	e1a0      	b.n	8000c96 <__aeabi_ddiv+0x50a>
 8000954:	d100      	bne.n	8000958 <__aeabi_ddiv+0x1cc>
 8000956:	e19b      	b.n	8000c90 <__aeabi_ddiv+0x504>
 8000958:	4688      	mov	r8, r1
 800095a:	1bae      	subs	r6, r5, r6
 800095c:	42b5      	cmp	r5, r6
 800095e:	41ad      	sbcs	r5, r5
 8000960:	1a80      	subs	r0, r0, r2
 8000962:	426d      	negs	r5, r5
 8000964:	1b40      	subs	r0, r0, r5
 8000966:	4284      	cmp	r4, r0
 8000968:	d100      	bne.n	800096c <__aeabi_ddiv+0x1e0>
 800096a:	e1d5      	b.n	8000d18 <__aeabi_ddiv+0x58c>
 800096c:	4649      	mov	r1, r9
 800096e:	f7ff fc51 	bl	8000214 <__aeabi_uidivmod>
 8000972:	9a01      	ldr	r2, [sp, #4]
 8000974:	040b      	lsls	r3, r1, #16
 8000976:	4342      	muls	r2, r0
 8000978:	0c31      	lsrs	r1, r6, #16
 800097a:	0005      	movs	r5, r0
 800097c:	4319      	orrs	r1, r3
 800097e:	428a      	cmp	r2, r1
 8000980:	d900      	bls.n	8000984 <__aeabi_ddiv+0x1f8>
 8000982:	e16c      	b.n	8000c5e <__aeabi_ddiv+0x4d2>
 8000984:	1a88      	subs	r0, r1, r2
 8000986:	4649      	mov	r1, r9
 8000988:	f7ff fc44 	bl	8000214 <__aeabi_uidivmod>
 800098c:	9a01      	ldr	r2, [sp, #4]
 800098e:	0436      	lsls	r6, r6, #16
 8000990:	4342      	muls	r2, r0
 8000992:	0409      	lsls	r1, r1, #16
 8000994:	0c36      	lsrs	r6, r6, #16
 8000996:	0003      	movs	r3, r0
 8000998:	430e      	orrs	r6, r1
 800099a:	42b2      	cmp	r2, r6
 800099c:	d900      	bls.n	80009a0 <__aeabi_ddiv+0x214>
 800099e:	e153      	b.n	8000c48 <__aeabi_ddiv+0x4bc>
 80009a0:	9803      	ldr	r0, [sp, #12]
 80009a2:	1ab6      	subs	r6, r6, r2
 80009a4:	0002      	movs	r2, r0
 80009a6:	042d      	lsls	r5, r5, #16
 80009a8:	431d      	orrs	r5, r3
 80009aa:	9f02      	ldr	r7, [sp, #8]
 80009ac:	042b      	lsls	r3, r5, #16
 80009ae:	0c1b      	lsrs	r3, r3, #16
 80009b0:	435a      	muls	r2, r3
 80009b2:	437b      	muls	r3, r7
 80009b4:	469c      	mov	ip, r3
 80009b6:	0c29      	lsrs	r1, r5, #16
 80009b8:	4348      	muls	r0, r1
 80009ba:	0c13      	lsrs	r3, r2, #16
 80009bc:	4484      	add	ip, r0
 80009be:	4463      	add	r3, ip
 80009c0:	4379      	muls	r1, r7
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d903      	bls.n	80009ce <__aeabi_ddiv+0x242>
 80009c6:	2080      	movs	r0, #128	; 0x80
 80009c8:	0240      	lsls	r0, r0, #9
 80009ca:	4684      	mov	ip, r0
 80009cc:	4461      	add	r1, ip
 80009ce:	0c18      	lsrs	r0, r3, #16
 80009d0:	0412      	lsls	r2, r2, #16
 80009d2:	041b      	lsls	r3, r3, #16
 80009d4:	0c12      	lsrs	r2, r2, #16
 80009d6:	1841      	adds	r1, r0, r1
 80009d8:	189b      	adds	r3, r3, r2
 80009da:	428e      	cmp	r6, r1
 80009dc:	d200      	bcs.n	80009e0 <__aeabi_ddiv+0x254>
 80009de:	e0ff      	b.n	8000be0 <__aeabi_ddiv+0x454>
 80009e0:	d100      	bne.n	80009e4 <__aeabi_ddiv+0x258>
 80009e2:	e0fa      	b.n	8000bda <__aeabi_ddiv+0x44e>
 80009e4:	2301      	movs	r3, #1
 80009e6:	431d      	orrs	r5, r3
 80009e8:	4a49      	ldr	r2, [pc, #292]	; (8000b10 <__aeabi_ddiv+0x384>)
 80009ea:	445a      	add	r2, fp
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	dc00      	bgt.n	80009f2 <__aeabi_ddiv+0x266>
 80009f0:	e0aa      	b.n	8000b48 <__aeabi_ddiv+0x3bc>
 80009f2:	076b      	lsls	r3, r5, #29
 80009f4:	d000      	beq.n	80009f8 <__aeabi_ddiv+0x26c>
 80009f6:	e13d      	b.n	8000c74 <__aeabi_ddiv+0x4e8>
 80009f8:	08ed      	lsrs	r5, r5, #3
 80009fa:	4643      	mov	r3, r8
 80009fc:	01db      	lsls	r3, r3, #7
 80009fe:	d506      	bpl.n	8000a0e <__aeabi_ddiv+0x282>
 8000a00:	4642      	mov	r2, r8
 8000a02:	4b44      	ldr	r3, [pc, #272]	; (8000b14 <__aeabi_ddiv+0x388>)
 8000a04:	401a      	ands	r2, r3
 8000a06:	4690      	mov	r8, r2
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	00d2      	lsls	r2, r2, #3
 8000a0c:	445a      	add	r2, fp
 8000a0e:	4b42      	ldr	r3, [pc, #264]	; (8000b18 <__aeabi_ddiv+0x38c>)
 8000a10:	429a      	cmp	r2, r3
 8000a12:	dd00      	ble.n	8000a16 <__aeabi_ddiv+0x28a>
 8000a14:	e71f      	b.n	8000856 <__aeabi_ddiv+0xca>
 8000a16:	4643      	mov	r3, r8
 8000a18:	075b      	lsls	r3, r3, #29
 8000a1a:	431d      	orrs	r5, r3
 8000a1c:	4643      	mov	r3, r8
 8000a1e:	0552      	lsls	r2, r2, #21
 8000a20:	025c      	lsls	r4, r3, #9
 8000a22:	0b24      	lsrs	r4, r4, #12
 8000a24:	0d53      	lsrs	r3, r2, #21
 8000a26:	e708      	b.n	800083a <__aeabi_ddiv+0xae>
 8000a28:	4652      	mov	r2, sl
 8000a2a:	4322      	orrs	r2, r4
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_ddiv+0x2a4>
 8000a2e:	e07b      	b.n	8000b28 <__aeabi_ddiv+0x39c>
 8000a30:	2c00      	cmp	r4, #0
 8000a32:	d100      	bne.n	8000a36 <__aeabi_ddiv+0x2aa>
 8000a34:	e0fa      	b.n	8000c2c <__aeabi_ddiv+0x4a0>
 8000a36:	0020      	movs	r0, r4
 8000a38:	f000 fa56 	bl	8000ee8 <__clzsi2>
 8000a3c:	0002      	movs	r2, r0
 8000a3e:	3a0b      	subs	r2, #11
 8000a40:	231d      	movs	r3, #29
 8000a42:	0001      	movs	r1, r0
 8000a44:	1a9b      	subs	r3, r3, r2
 8000a46:	4652      	mov	r2, sl
 8000a48:	3908      	subs	r1, #8
 8000a4a:	40da      	lsrs	r2, r3
 8000a4c:	408c      	lsls	r4, r1
 8000a4e:	4314      	orrs	r4, r2
 8000a50:	4652      	mov	r2, sl
 8000a52:	408a      	lsls	r2, r1
 8000a54:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <__aeabi_ddiv+0x390>)
 8000a56:	4458      	add	r0, fp
 8000a58:	469b      	mov	fp, r3
 8000a5a:	4483      	add	fp, r0
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	e6d5      	b.n	800080c <__aeabi_ddiv+0x80>
 8000a60:	464b      	mov	r3, r9
 8000a62:	4323      	orrs	r3, r4
 8000a64:	4698      	mov	r8, r3
 8000a66:	d044      	beq.n	8000af2 <__aeabi_ddiv+0x366>
 8000a68:	2c00      	cmp	r4, #0
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_ddiv+0x2e2>
 8000a6c:	e0ce      	b.n	8000c0c <__aeabi_ddiv+0x480>
 8000a6e:	0020      	movs	r0, r4
 8000a70:	f000 fa3a 	bl	8000ee8 <__clzsi2>
 8000a74:	0001      	movs	r1, r0
 8000a76:	0002      	movs	r2, r0
 8000a78:	390b      	subs	r1, #11
 8000a7a:	231d      	movs	r3, #29
 8000a7c:	1a5b      	subs	r3, r3, r1
 8000a7e:	4649      	mov	r1, r9
 8000a80:	0010      	movs	r0, r2
 8000a82:	40d9      	lsrs	r1, r3
 8000a84:	3808      	subs	r0, #8
 8000a86:	4084      	lsls	r4, r0
 8000a88:	000b      	movs	r3, r1
 8000a8a:	464d      	mov	r5, r9
 8000a8c:	4323      	orrs	r3, r4
 8000a8e:	4698      	mov	r8, r3
 8000a90:	4085      	lsls	r5, r0
 8000a92:	4823      	ldr	r0, [pc, #140]	; (8000b20 <__aeabi_ddiv+0x394>)
 8000a94:	1a83      	subs	r3, r0, r2
 8000a96:	469b      	mov	fp, r3
 8000a98:	2300      	movs	r3, #0
 8000a9a:	4699      	mov	r9, r3
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	e69a      	b.n	80007d6 <__aeabi_ddiv+0x4a>
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	4323      	orrs	r3, r4
 8000aa4:	4698      	mov	r8, r3
 8000aa6:	d11d      	bne.n	8000ae4 <__aeabi_ddiv+0x358>
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	4699      	mov	r9, r3
 8000aac:	3b06      	subs	r3, #6
 8000aae:	2500      	movs	r5, #0
 8000ab0:	4683      	mov	fp, r0
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	e68f      	b.n	80007d6 <__aeabi_ddiv+0x4a>
 8000ab6:	4652      	mov	r2, sl
 8000ab8:	4322      	orrs	r2, r4
 8000aba:	d109      	bne.n	8000ad0 <__aeabi_ddiv+0x344>
 8000abc:	2302      	movs	r3, #2
 8000abe:	4649      	mov	r1, r9
 8000ac0:	4319      	orrs	r1, r3
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <__aeabi_ddiv+0x398>)
 8000ac4:	4689      	mov	r9, r1
 8000ac6:	469c      	mov	ip, r3
 8000ac8:	2400      	movs	r4, #0
 8000aca:	2002      	movs	r0, #2
 8000acc:	44e3      	add	fp, ip
 8000ace:	e69d      	b.n	800080c <__aeabi_ddiv+0x80>
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	464a      	mov	r2, r9
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <__aeabi_ddiv+0x398>)
 8000ad8:	4691      	mov	r9, r2
 8000ada:	469c      	mov	ip, r3
 8000adc:	4652      	mov	r2, sl
 8000ade:	2003      	movs	r0, #3
 8000ae0:	44e3      	add	fp, ip
 8000ae2:	e693      	b.n	800080c <__aeabi_ddiv+0x80>
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	4699      	mov	r9, r3
 8000ae8:	3b09      	subs	r3, #9
 8000aea:	46a0      	mov	r8, r4
 8000aec:	4683      	mov	fp, r0
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	e671      	b.n	80007d6 <__aeabi_ddiv+0x4a>
 8000af2:	2304      	movs	r3, #4
 8000af4:	4699      	mov	r9, r3
 8000af6:	2300      	movs	r3, #0
 8000af8:	469b      	mov	fp, r3
 8000afa:	3301      	adds	r3, #1
 8000afc:	2500      	movs	r5, #0
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	e669      	b.n	80007d6 <__aeabi_ddiv+0x4a>
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	000007ff 	.word	0x000007ff
 8000b08:	fffffc01 	.word	0xfffffc01
 8000b0c:	080037e4 	.word	0x080037e4
 8000b10:	000003ff 	.word	0x000003ff
 8000b14:	feffffff 	.word	0xfeffffff
 8000b18:	000007fe 	.word	0x000007fe
 8000b1c:	000003f3 	.word	0x000003f3
 8000b20:	fffffc0d 	.word	0xfffffc0d
 8000b24:	fffff801 	.word	0xfffff801
 8000b28:	4649      	mov	r1, r9
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	4689      	mov	r9, r1
 8000b30:	2400      	movs	r4, #0
 8000b32:	2001      	movs	r0, #1
 8000b34:	e66a      	b.n	800080c <__aeabi_ddiv+0x80>
 8000b36:	2300      	movs	r3, #0
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	469a      	mov	sl, r3
 8000b3c:	2500      	movs	r5, #0
 8000b3e:	4b8a      	ldr	r3, [pc, #552]	; (8000d68 <__aeabi_ddiv+0x5dc>)
 8000b40:	0324      	lsls	r4, r4, #12
 8000b42:	e67a      	b.n	800083a <__aeabi_ddiv+0xae>
 8000b44:	2501      	movs	r5, #1
 8000b46:	426d      	negs	r5, r5
 8000b48:	2301      	movs	r3, #1
 8000b4a:	1a9b      	subs	r3, r3, r2
 8000b4c:	2b38      	cmp	r3, #56	; 0x38
 8000b4e:	dd00      	ble.n	8000b52 <__aeabi_ddiv+0x3c6>
 8000b50:	e670      	b.n	8000834 <__aeabi_ddiv+0xa8>
 8000b52:	2b1f      	cmp	r3, #31
 8000b54:	dc00      	bgt.n	8000b58 <__aeabi_ddiv+0x3cc>
 8000b56:	e0bf      	b.n	8000cd8 <__aeabi_ddiv+0x54c>
 8000b58:	211f      	movs	r1, #31
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	1a8a      	subs	r2, r1, r2
 8000b5e:	4641      	mov	r1, r8
 8000b60:	40d1      	lsrs	r1, r2
 8000b62:	000a      	movs	r2, r1
 8000b64:	2b20      	cmp	r3, #32
 8000b66:	d004      	beq.n	8000b72 <__aeabi_ddiv+0x3e6>
 8000b68:	4641      	mov	r1, r8
 8000b6a:	4b80      	ldr	r3, [pc, #512]	; (8000d6c <__aeabi_ddiv+0x5e0>)
 8000b6c:	445b      	add	r3, fp
 8000b6e:	4099      	lsls	r1, r3
 8000b70:	430d      	orrs	r5, r1
 8000b72:	1e6b      	subs	r3, r5, #1
 8000b74:	419d      	sbcs	r5, r3
 8000b76:	2307      	movs	r3, #7
 8000b78:	432a      	orrs	r2, r5
 8000b7a:	001d      	movs	r5, r3
 8000b7c:	2400      	movs	r4, #0
 8000b7e:	4015      	ands	r5, r2
 8000b80:	4213      	tst	r3, r2
 8000b82:	d100      	bne.n	8000b86 <__aeabi_ddiv+0x3fa>
 8000b84:	e0d4      	b.n	8000d30 <__aeabi_ddiv+0x5a4>
 8000b86:	210f      	movs	r1, #15
 8000b88:	2300      	movs	r3, #0
 8000b8a:	4011      	ands	r1, r2
 8000b8c:	2904      	cmp	r1, #4
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_ddiv+0x406>
 8000b90:	e0cb      	b.n	8000d2a <__aeabi_ddiv+0x59e>
 8000b92:	1d11      	adds	r1, r2, #4
 8000b94:	4291      	cmp	r1, r2
 8000b96:	4192      	sbcs	r2, r2
 8000b98:	4252      	negs	r2, r2
 8000b9a:	189b      	adds	r3, r3, r2
 8000b9c:	000a      	movs	r2, r1
 8000b9e:	0219      	lsls	r1, r3, #8
 8000ba0:	d400      	bmi.n	8000ba4 <__aeabi_ddiv+0x418>
 8000ba2:	e0c2      	b.n	8000d2a <__aeabi_ddiv+0x59e>
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	2500      	movs	r5, #0
 8000baa:	e646      	b.n	800083a <__aeabi_ddiv+0xae>
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	4641      	mov	r1, r8
 8000bb0:	031b      	lsls	r3, r3, #12
 8000bb2:	4219      	tst	r1, r3
 8000bb4:	d008      	beq.n	8000bc8 <__aeabi_ddiv+0x43c>
 8000bb6:	421c      	tst	r4, r3
 8000bb8:	d106      	bne.n	8000bc8 <__aeabi_ddiv+0x43c>
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	0324      	lsls	r4, r4, #12
 8000bbe:	46ba      	mov	sl, r7
 8000bc0:	0015      	movs	r5, r2
 8000bc2:	4b69      	ldr	r3, [pc, #420]	; (8000d68 <__aeabi_ddiv+0x5dc>)
 8000bc4:	0b24      	lsrs	r4, r4, #12
 8000bc6:	e638      	b.n	800083a <__aeabi_ddiv+0xae>
 8000bc8:	2480      	movs	r4, #128	; 0x80
 8000bca:	4643      	mov	r3, r8
 8000bcc:	0324      	lsls	r4, r4, #12
 8000bce:	431c      	orrs	r4, r3
 8000bd0:	0324      	lsls	r4, r4, #12
 8000bd2:	46b2      	mov	sl, r6
 8000bd4:	4b64      	ldr	r3, [pc, #400]	; (8000d68 <__aeabi_ddiv+0x5dc>)
 8000bd6:	0b24      	lsrs	r4, r4, #12
 8000bd8:	e62f      	b.n	800083a <__aeabi_ddiv+0xae>
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_ddiv+0x454>
 8000bde:	e703      	b.n	80009e8 <__aeabi_ddiv+0x25c>
 8000be0:	19a6      	adds	r6, r4, r6
 8000be2:	1e68      	subs	r0, r5, #1
 8000be4:	42a6      	cmp	r6, r4
 8000be6:	d200      	bcs.n	8000bea <__aeabi_ddiv+0x45e>
 8000be8:	e08d      	b.n	8000d06 <__aeabi_ddiv+0x57a>
 8000bea:	428e      	cmp	r6, r1
 8000bec:	d200      	bcs.n	8000bf0 <__aeabi_ddiv+0x464>
 8000bee:	e0a3      	b.n	8000d38 <__aeabi_ddiv+0x5ac>
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_ddiv+0x468>
 8000bf2:	e0b3      	b.n	8000d5c <__aeabi_ddiv+0x5d0>
 8000bf4:	0005      	movs	r5, r0
 8000bf6:	e6f5      	b.n	80009e4 <__aeabi_ddiv+0x258>
 8000bf8:	42aa      	cmp	r2, r5
 8000bfa:	d900      	bls.n	8000bfe <__aeabi_ddiv+0x472>
 8000bfc:	e639      	b.n	8000872 <__aeabi_ddiv+0xe6>
 8000bfe:	4643      	mov	r3, r8
 8000c00:	07de      	lsls	r6, r3, #31
 8000c02:	0858      	lsrs	r0, r3, #1
 8000c04:	086b      	lsrs	r3, r5, #1
 8000c06:	431e      	orrs	r6, r3
 8000c08:	07ed      	lsls	r5, r5, #31
 8000c0a:	e639      	b.n	8000880 <__aeabi_ddiv+0xf4>
 8000c0c:	4648      	mov	r0, r9
 8000c0e:	f000 f96b 	bl	8000ee8 <__clzsi2>
 8000c12:	0001      	movs	r1, r0
 8000c14:	0002      	movs	r2, r0
 8000c16:	3115      	adds	r1, #21
 8000c18:	3220      	adds	r2, #32
 8000c1a:	291c      	cmp	r1, #28
 8000c1c:	dc00      	bgt.n	8000c20 <__aeabi_ddiv+0x494>
 8000c1e:	e72c      	b.n	8000a7a <__aeabi_ddiv+0x2ee>
 8000c20:	464b      	mov	r3, r9
 8000c22:	3808      	subs	r0, #8
 8000c24:	4083      	lsls	r3, r0
 8000c26:	2500      	movs	r5, #0
 8000c28:	4698      	mov	r8, r3
 8000c2a:	e732      	b.n	8000a92 <__aeabi_ddiv+0x306>
 8000c2c:	f000 f95c 	bl	8000ee8 <__clzsi2>
 8000c30:	0003      	movs	r3, r0
 8000c32:	001a      	movs	r2, r3
 8000c34:	3215      	adds	r2, #21
 8000c36:	3020      	adds	r0, #32
 8000c38:	2a1c      	cmp	r2, #28
 8000c3a:	dc00      	bgt.n	8000c3e <__aeabi_ddiv+0x4b2>
 8000c3c:	e700      	b.n	8000a40 <__aeabi_ddiv+0x2b4>
 8000c3e:	4654      	mov	r4, sl
 8000c40:	3b08      	subs	r3, #8
 8000c42:	2200      	movs	r2, #0
 8000c44:	409c      	lsls	r4, r3
 8000c46:	e705      	b.n	8000a54 <__aeabi_ddiv+0x2c8>
 8000c48:	1936      	adds	r6, r6, r4
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	42b4      	cmp	r4, r6
 8000c4e:	d900      	bls.n	8000c52 <__aeabi_ddiv+0x4c6>
 8000c50:	e6a6      	b.n	80009a0 <__aeabi_ddiv+0x214>
 8000c52:	42b2      	cmp	r2, r6
 8000c54:	d800      	bhi.n	8000c58 <__aeabi_ddiv+0x4cc>
 8000c56:	e6a3      	b.n	80009a0 <__aeabi_ddiv+0x214>
 8000c58:	1e83      	subs	r3, r0, #2
 8000c5a:	1936      	adds	r6, r6, r4
 8000c5c:	e6a0      	b.n	80009a0 <__aeabi_ddiv+0x214>
 8000c5e:	1909      	adds	r1, r1, r4
 8000c60:	3d01      	subs	r5, #1
 8000c62:	428c      	cmp	r4, r1
 8000c64:	d900      	bls.n	8000c68 <__aeabi_ddiv+0x4dc>
 8000c66:	e68d      	b.n	8000984 <__aeabi_ddiv+0x1f8>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	d800      	bhi.n	8000c6e <__aeabi_ddiv+0x4e2>
 8000c6c:	e68a      	b.n	8000984 <__aeabi_ddiv+0x1f8>
 8000c6e:	1e85      	subs	r5, r0, #2
 8000c70:	1909      	adds	r1, r1, r4
 8000c72:	e687      	b.n	8000984 <__aeabi_ddiv+0x1f8>
 8000c74:	230f      	movs	r3, #15
 8000c76:	402b      	ands	r3, r5
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_ddiv+0x4f2>
 8000c7c:	e6bc      	b.n	80009f8 <__aeabi_ddiv+0x26c>
 8000c7e:	2305      	movs	r3, #5
 8000c80:	425b      	negs	r3, r3
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	419b      	sbcs	r3, r3
 8000c86:	3504      	adds	r5, #4
 8000c88:	425b      	negs	r3, r3
 8000c8a:	08ed      	lsrs	r5, r5, #3
 8000c8c:	4498      	add	r8, r3
 8000c8e:	e6b4      	b.n	80009fa <__aeabi_ddiv+0x26e>
 8000c90:	42af      	cmp	r7, r5
 8000c92:	d900      	bls.n	8000c96 <__aeabi_ddiv+0x50a>
 8000c94:	e660      	b.n	8000958 <__aeabi_ddiv+0x1cc>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	d804      	bhi.n	8000ca4 <__aeabi_ddiv+0x518>
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_ddiv+0x512>
 8000c9c:	e65c      	b.n	8000958 <__aeabi_ddiv+0x1cc>
 8000c9e:	42ae      	cmp	r6, r5
 8000ca0:	d800      	bhi.n	8000ca4 <__aeabi_ddiv+0x518>
 8000ca2:	e659      	b.n	8000958 <__aeabi_ddiv+0x1cc>
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	469c      	mov	ip, r3
 8000caa:	9b00      	ldr	r3, [sp, #0]
 8000cac:	44e0      	add	r8, ip
 8000cae:	469c      	mov	ip, r3
 8000cb0:	4465      	add	r5, ip
 8000cb2:	429d      	cmp	r5, r3
 8000cb4:	419b      	sbcs	r3, r3
 8000cb6:	425b      	negs	r3, r3
 8000cb8:	191b      	adds	r3, r3, r4
 8000cba:	18c0      	adds	r0, r0, r3
 8000cbc:	e64d      	b.n	800095a <__aeabi_ddiv+0x1ce>
 8000cbe:	428a      	cmp	r2, r1
 8000cc0:	d800      	bhi.n	8000cc4 <__aeabi_ddiv+0x538>
 8000cc2:	e60e      	b.n	80008e2 <__aeabi_ddiv+0x156>
 8000cc4:	1e83      	subs	r3, r0, #2
 8000cc6:	1909      	adds	r1, r1, r4
 8000cc8:	e60b      	b.n	80008e2 <__aeabi_ddiv+0x156>
 8000cca:	428a      	cmp	r2, r1
 8000ccc:	d800      	bhi.n	8000cd0 <__aeabi_ddiv+0x544>
 8000cce:	e5f4      	b.n	80008ba <__aeabi_ddiv+0x12e>
 8000cd0:	1e83      	subs	r3, r0, #2
 8000cd2:	4698      	mov	r8, r3
 8000cd4:	1909      	adds	r1, r1, r4
 8000cd6:	e5f0      	b.n	80008ba <__aeabi_ddiv+0x12e>
 8000cd8:	4925      	ldr	r1, [pc, #148]	; (8000d70 <__aeabi_ddiv+0x5e4>)
 8000cda:	0028      	movs	r0, r5
 8000cdc:	4459      	add	r1, fp
 8000cde:	408d      	lsls	r5, r1
 8000ce0:	4642      	mov	r2, r8
 8000ce2:	408a      	lsls	r2, r1
 8000ce4:	1e69      	subs	r1, r5, #1
 8000ce6:	418d      	sbcs	r5, r1
 8000ce8:	4641      	mov	r1, r8
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	40d9      	lsrs	r1, r3
 8000cee:	4302      	orrs	r2, r0
 8000cf0:	432a      	orrs	r2, r5
 8000cf2:	000b      	movs	r3, r1
 8000cf4:	0751      	lsls	r1, r2, #29
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_ddiv+0x56e>
 8000cf8:	e751      	b.n	8000b9e <__aeabi_ddiv+0x412>
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	4011      	ands	r1, r2
 8000cfe:	2904      	cmp	r1, #4
 8000d00:	d000      	beq.n	8000d04 <__aeabi_ddiv+0x578>
 8000d02:	e746      	b.n	8000b92 <__aeabi_ddiv+0x406>
 8000d04:	e74b      	b.n	8000b9e <__aeabi_ddiv+0x412>
 8000d06:	0005      	movs	r5, r0
 8000d08:	428e      	cmp	r6, r1
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_ddiv+0x582>
 8000d0c:	e66a      	b.n	80009e4 <__aeabi_ddiv+0x258>
 8000d0e:	9a00      	ldr	r2, [sp, #0]
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d000      	beq.n	8000d16 <__aeabi_ddiv+0x58a>
 8000d14:	e666      	b.n	80009e4 <__aeabi_ddiv+0x258>
 8000d16:	e667      	b.n	80009e8 <__aeabi_ddiv+0x25c>
 8000d18:	4a16      	ldr	r2, [pc, #88]	; (8000d74 <__aeabi_ddiv+0x5e8>)
 8000d1a:	445a      	add	r2, fp
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	dc00      	bgt.n	8000d22 <__aeabi_ddiv+0x596>
 8000d20:	e710      	b.n	8000b44 <__aeabi_ddiv+0x3b8>
 8000d22:	2301      	movs	r3, #1
 8000d24:	2500      	movs	r5, #0
 8000d26:	4498      	add	r8, r3
 8000d28:	e667      	b.n	80009fa <__aeabi_ddiv+0x26e>
 8000d2a:	075d      	lsls	r5, r3, #29
 8000d2c:	025b      	lsls	r3, r3, #9
 8000d2e:	0b1c      	lsrs	r4, r3, #12
 8000d30:	08d2      	lsrs	r2, r2, #3
 8000d32:	2300      	movs	r3, #0
 8000d34:	4315      	orrs	r5, r2
 8000d36:	e580      	b.n	800083a <__aeabi_ddiv+0xae>
 8000d38:	9800      	ldr	r0, [sp, #0]
 8000d3a:	3d02      	subs	r5, #2
 8000d3c:	0042      	lsls	r2, r0, #1
 8000d3e:	4282      	cmp	r2, r0
 8000d40:	41bf      	sbcs	r7, r7
 8000d42:	427f      	negs	r7, r7
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	1936      	adds	r6, r6, r4
 8000d48:	9200      	str	r2, [sp, #0]
 8000d4a:	e7dd      	b.n	8000d08 <__aeabi_ddiv+0x57c>
 8000d4c:	2480      	movs	r4, #128	; 0x80
 8000d4e:	4643      	mov	r3, r8
 8000d50:	0324      	lsls	r4, r4, #12
 8000d52:	431c      	orrs	r4, r3
 8000d54:	0324      	lsls	r4, r4, #12
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__aeabi_ddiv+0x5dc>)
 8000d58:	0b24      	lsrs	r4, r4, #12
 8000d5a:	e56e      	b.n	800083a <__aeabi_ddiv+0xae>
 8000d5c:	9a00      	ldr	r2, [sp, #0]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d3ea      	bcc.n	8000d38 <__aeabi_ddiv+0x5ac>
 8000d62:	0005      	movs	r5, r0
 8000d64:	e7d3      	b.n	8000d0e <__aeabi_ddiv+0x582>
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	000007ff 	.word	0x000007ff
 8000d6c:	0000043e 	.word	0x0000043e
 8000d70:	0000041e 	.word	0x0000041e
 8000d74:	000003ff 	.word	0x000003ff

08000d78 <__aeabi_i2d>:
 8000d78:	b570      	push	{r4, r5, r6, lr}
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d016      	beq.n	8000dac <__aeabi_i2d+0x34>
 8000d7e:	17c3      	asrs	r3, r0, #31
 8000d80:	18c5      	adds	r5, r0, r3
 8000d82:	405d      	eors	r5, r3
 8000d84:	0fc4      	lsrs	r4, r0, #31
 8000d86:	0028      	movs	r0, r5
 8000d88:	f000 f8ae 	bl	8000ee8 <__clzsi2>
 8000d8c:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <__aeabi_i2d+0x5c>)
 8000d8e:	1a12      	subs	r2, r2, r0
 8000d90:	280a      	cmp	r0, #10
 8000d92:	dc16      	bgt.n	8000dc2 <__aeabi_i2d+0x4a>
 8000d94:	0003      	movs	r3, r0
 8000d96:	002e      	movs	r6, r5
 8000d98:	3315      	adds	r3, #21
 8000d9a:	409e      	lsls	r6, r3
 8000d9c:	230b      	movs	r3, #11
 8000d9e:	1a18      	subs	r0, r3, r0
 8000da0:	40c5      	lsrs	r5, r0
 8000da2:	0552      	lsls	r2, r2, #21
 8000da4:	032d      	lsls	r5, r5, #12
 8000da6:	0b2d      	lsrs	r5, r5, #12
 8000da8:	0d53      	lsrs	r3, r2, #21
 8000daa:	e003      	b.n	8000db4 <__aeabi_i2d+0x3c>
 8000dac:	2400      	movs	r4, #0
 8000dae:	2300      	movs	r3, #0
 8000db0:	2500      	movs	r5, #0
 8000db2:	2600      	movs	r6, #0
 8000db4:	051b      	lsls	r3, r3, #20
 8000db6:	432b      	orrs	r3, r5
 8000db8:	07e4      	lsls	r4, r4, #31
 8000dba:	4323      	orrs	r3, r4
 8000dbc:	0030      	movs	r0, r6
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	bd70      	pop	{r4, r5, r6, pc}
 8000dc2:	380b      	subs	r0, #11
 8000dc4:	4085      	lsls	r5, r0
 8000dc6:	0552      	lsls	r2, r2, #21
 8000dc8:	032d      	lsls	r5, r5, #12
 8000dca:	2600      	movs	r6, #0
 8000dcc:	0b2d      	lsrs	r5, r5, #12
 8000dce:	0d53      	lsrs	r3, r2, #21
 8000dd0:	e7f0      	b.n	8000db4 <__aeabi_i2d+0x3c>
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	0000041e 	.word	0x0000041e

08000dd8 <__aeabi_d2f>:
 8000dd8:	0002      	movs	r2, r0
 8000dda:	004b      	lsls	r3, r1, #1
 8000ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dde:	0d5b      	lsrs	r3, r3, #21
 8000de0:	030c      	lsls	r4, r1, #12
 8000de2:	4e3d      	ldr	r6, [pc, #244]	; (8000ed8 <__aeabi_d2f+0x100>)
 8000de4:	0a64      	lsrs	r4, r4, #9
 8000de6:	0f40      	lsrs	r0, r0, #29
 8000de8:	1c5f      	adds	r7, r3, #1
 8000dea:	0fc9      	lsrs	r1, r1, #31
 8000dec:	4304      	orrs	r4, r0
 8000dee:	00d5      	lsls	r5, r2, #3
 8000df0:	4237      	tst	r7, r6
 8000df2:	d00a      	beq.n	8000e0a <__aeabi_d2f+0x32>
 8000df4:	4839      	ldr	r0, [pc, #228]	; (8000edc <__aeabi_d2f+0x104>)
 8000df6:	181e      	adds	r6, r3, r0
 8000df8:	2efe      	cmp	r6, #254	; 0xfe
 8000dfa:	dd16      	ble.n	8000e2a <__aeabi_d2f+0x52>
 8000dfc:	20ff      	movs	r0, #255	; 0xff
 8000dfe:	2400      	movs	r4, #0
 8000e00:	05c0      	lsls	r0, r0, #23
 8000e02:	4320      	orrs	r0, r4
 8000e04:	07c9      	lsls	r1, r1, #31
 8000e06:	4308      	orrs	r0, r1
 8000e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d106      	bne.n	8000e1c <__aeabi_d2f+0x44>
 8000e0e:	432c      	orrs	r4, r5
 8000e10:	d026      	beq.n	8000e60 <__aeabi_d2f+0x88>
 8000e12:	2205      	movs	r2, #5
 8000e14:	0192      	lsls	r2, r2, #6
 8000e16:	0a54      	lsrs	r4, r2, #9
 8000e18:	b2d8      	uxtb	r0, r3
 8000e1a:	e7f1      	b.n	8000e00 <__aeabi_d2f+0x28>
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	d0ed      	beq.n	8000dfc <__aeabi_d2f+0x24>
 8000e20:	2080      	movs	r0, #128	; 0x80
 8000e22:	03c0      	lsls	r0, r0, #15
 8000e24:	4304      	orrs	r4, r0
 8000e26:	20ff      	movs	r0, #255	; 0xff
 8000e28:	e7ea      	b.n	8000e00 <__aeabi_d2f+0x28>
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	dd1b      	ble.n	8000e66 <__aeabi_d2f+0x8e>
 8000e2e:	0192      	lsls	r2, r2, #6
 8000e30:	1e53      	subs	r3, r2, #1
 8000e32:	419a      	sbcs	r2, r3
 8000e34:	00e4      	lsls	r4, r4, #3
 8000e36:	0f6d      	lsrs	r5, r5, #29
 8000e38:	4322      	orrs	r2, r4
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	0753      	lsls	r3, r2, #29
 8000e3e:	d048      	beq.n	8000ed2 <__aeabi_d2f+0xfa>
 8000e40:	230f      	movs	r3, #15
 8000e42:	4013      	ands	r3, r2
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d000      	beq.n	8000e4a <__aeabi_d2f+0x72>
 8000e48:	3204      	adds	r2, #4
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	04db      	lsls	r3, r3, #19
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d03f      	beq.n	8000ed2 <__aeabi_d2f+0xfa>
 8000e52:	1c70      	adds	r0, r6, #1
 8000e54:	2efe      	cmp	r6, #254	; 0xfe
 8000e56:	d0d1      	beq.n	8000dfc <__aeabi_d2f+0x24>
 8000e58:	0192      	lsls	r2, r2, #6
 8000e5a:	0a54      	lsrs	r4, r2, #9
 8000e5c:	b2c0      	uxtb	r0, r0
 8000e5e:	e7cf      	b.n	8000e00 <__aeabi_d2f+0x28>
 8000e60:	2000      	movs	r0, #0
 8000e62:	2400      	movs	r4, #0
 8000e64:	e7cc      	b.n	8000e00 <__aeabi_d2f+0x28>
 8000e66:	0032      	movs	r2, r6
 8000e68:	3217      	adds	r2, #23
 8000e6a:	db22      	blt.n	8000eb2 <__aeabi_d2f+0xda>
 8000e6c:	2080      	movs	r0, #128	; 0x80
 8000e6e:	0400      	lsls	r0, r0, #16
 8000e70:	4320      	orrs	r0, r4
 8000e72:	241e      	movs	r4, #30
 8000e74:	1ba4      	subs	r4, r4, r6
 8000e76:	2c1f      	cmp	r4, #31
 8000e78:	dd1d      	ble.n	8000eb6 <__aeabi_d2f+0xde>
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	4252      	negs	r2, r2
 8000e7e:	1b96      	subs	r6, r2, r6
 8000e80:	0002      	movs	r2, r0
 8000e82:	40f2      	lsrs	r2, r6
 8000e84:	0016      	movs	r6, r2
 8000e86:	2c20      	cmp	r4, #32
 8000e88:	d004      	beq.n	8000e94 <__aeabi_d2f+0xbc>
 8000e8a:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <__aeabi_d2f+0x108>)
 8000e8c:	4694      	mov	ip, r2
 8000e8e:	4463      	add	r3, ip
 8000e90:	4098      	lsls	r0, r3
 8000e92:	4305      	orrs	r5, r0
 8000e94:	002a      	movs	r2, r5
 8000e96:	1e53      	subs	r3, r2, #1
 8000e98:	419a      	sbcs	r2, r3
 8000e9a:	4332      	orrs	r2, r6
 8000e9c:	2600      	movs	r6, #0
 8000e9e:	0753      	lsls	r3, r2, #29
 8000ea0:	d1ce      	bne.n	8000e40 <__aeabi_d2f+0x68>
 8000ea2:	2480      	movs	r4, #128	; 0x80
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	04e4      	lsls	r4, r4, #19
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	4023      	ands	r3, r4
 8000eac:	4222      	tst	r2, r4
 8000eae:	d1d3      	bne.n	8000e58 <__aeabi_d2f+0x80>
 8000eb0:	e7b0      	b.n	8000e14 <__aeabi_d2f+0x3c>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e7ad      	b.n	8000e12 <__aeabi_d2f+0x3a>
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <__aeabi_d2f+0x10c>)
 8000eb8:	4694      	mov	ip, r2
 8000eba:	002a      	movs	r2, r5
 8000ebc:	40e2      	lsrs	r2, r4
 8000ebe:	0014      	movs	r4, r2
 8000ec0:	002a      	movs	r2, r5
 8000ec2:	4463      	add	r3, ip
 8000ec4:	409a      	lsls	r2, r3
 8000ec6:	4098      	lsls	r0, r3
 8000ec8:	1e55      	subs	r5, r2, #1
 8000eca:	41aa      	sbcs	r2, r5
 8000ecc:	4302      	orrs	r2, r0
 8000ece:	4322      	orrs	r2, r4
 8000ed0:	e7e4      	b.n	8000e9c <__aeabi_d2f+0xc4>
 8000ed2:	0033      	movs	r3, r6
 8000ed4:	e79e      	b.n	8000e14 <__aeabi_d2f+0x3c>
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	000007fe 	.word	0x000007fe
 8000edc:	fffffc80 	.word	0xfffffc80
 8000ee0:	fffffca2 	.word	0xfffffca2
 8000ee4:	fffffc82 	.word	0xfffffc82

08000ee8 <__clzsi2>:
 8000ee8:	211c      	movs	r1, #28
 8000eea:	2301      	movs	r3, #1
 8000eec:	041b      	lsls	r3, r3, #16
 8000eee:	4298      	cmp	r0, r3
 8000ef0:	d301      	bcc.n	8000ef6 <__clzsi2+0xe>
 8000ef2:	0c00      	lsrs	r0, r0, #16
 8000ef4:	3910      	subs	r1, #16
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	4298      	cmp	r0, r3
 8000efa:	d301      	bcc.n	8000f00 <__clzsi2+0x18>
 8000efc:	0a00      	lsrs	r0, r0, #8
 8000efe:	3908      	subs	r1, #8
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	4298      	cmp	r0, r3
 8000f04:	d301      	bcc.n	8000f0a <__clzsi2+0x22>
 8000f06:	0900      	lsrs	r0, r0, #4
 8000f08:	3904      	subs	r1, #4
 8000f0a:	a202      	add	r2, pc, #8	; (adr r2, 8000f14 <__clzsi2+0x2c>)
 8000f0c:	5c10      	ldrb	r0, [r2, r0]
 8000f0e:	1840      	adds	r0, r0, r1
 8000f10:	4770      	bx	lr
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	02020304 	.word	0x02020304
 8000f18:	01010101 	.word	0x01010101
	...

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f000 fbc4 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f80b 	bl	8000f46 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f000 f8b2 	bl	8001098 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f34:	f000 f868 	bl	8001008 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000f38:	f000 f8e2 	bl	8001100 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_Gyro();
 8000f3c:	f000 f9da 	bl	80012f4 <MPU6050_Read_Gyro>
	  MPU6050_Read_Accel();
 8000f40:	f000 f952 	bl	80011e8 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8000f44:	e7fa      	b.n	8000f3c <main+0x18>

08000f46 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f46:	b590      	push	{r4, r7, lr}
 8000f48:	b097      	sub	sp, #92	; 0x5c
 8000f4a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4c:	2428      	movs	r4, #40	; 0x28
 8000f4e:	193b      	adds	r3, r7, r4
 8000f50:	0018      	movs	r0, r3
 8000f52:	2330      	movs	r3, #48	; 0x30
 8000f54:	001a      	movs	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	f002 fbe0 	bl	800371c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	2318      	movs	r3, #24
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	0018      	movs	r0, r3
 8000f62:	2310      	movs	r3, #16
 8000f64:	001a      	movs	r2, r3
 8000f66:	2100      	movs	r1, #0
 8000f68:	f002 fbd8 	bl	800371c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	0018      	movs	r0, r3
 8000f70:	2314      	movs	r3, #20
 8000f72:	001a      	movs	r2, r3
 8000f74:	2100      	movs	r1, #0
 8000f76:	f002 fbd1 	bl	800371c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f7a:	0021      	movs	r1, r4
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2202      	movs	r2, #2
 8000f80:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2201      	movs	r2, #1
 8000f86:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2202      	movs	r2, #2
 8000f92:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	22a0      	movs	r2, #160	; 0xa0
 8000f9e:	0392      	lsls	r2, r2, #14
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	0018      	movs	r0, r3
 8000fac:	f001 fe68 	bl	8002c80 <HAL_RCC_OscConfig>
 8000fb0:	1e03      	subs	r3, r0, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fb4:	f000 fac0 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb8:	2118      	movs	r1, #24
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f002 f96c 	bl	80032b4 <HAL_RCC_ClockConfig>
 8000fdc:	1e03      	subs	r3, r0, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fe0:	f000 faaa 	bl	8001538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f002 fa90 	bl	8003518 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	1e03      	subs	r3, r0, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ffc:	f000 fa9c 	bl	8001538 <Error_Handler>
  }
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b017      	add	sp, #92	; 0x5c
 8001006:	bd90      	pop	{r4, r7, pc}

08001008 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <MX_I2C1_Init+0x80>)
 800100e:	4a1f      	ldr	r2, [pc, #124]	; (800108c <MX_I2C1_Init+0x84>)
 8001010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_I2C1_Init+0x80>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_I2C1_Init+0x80>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_I2C1_Init+0x80>)
 8001020:	2201      	movs	r2, #1
 8001022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_I2C1_Init+0x80>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_I2C1_Init+0x80>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_I2C1_Init+0x80>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_I2C1_Init+0x80>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_I2C1_Init+0x80>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_I2C1_Init+0x80>)
 8001044:	0018      	movs	r0, r3
 8001046:	f000 fdbd 	bl	8001bc4 <HAL_I2C_Init>
 800104a:	1e03      	subs	r3, r0, #0
 800104c:	d001      	beq.n	8001052 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800104e:	f000 fa73 	bl	8001538 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <MX_I2C1_Init+0x80>)
 8001054:	2100      	movs	r1, #0
 8001056:	0018      	movs	r0, r3
 8001058:	f001 fd7a 	bl	8002b50 <HAL_I2CEx_ConfigAnalogFilter>
 800105c:	1e03      	subs	r3, r0, #0
 800105e:	d001      	beq.n	8001064 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001060:	f000 fa6a 	bl	8001538 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 5) != HAL_OK)
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_I2C1_Init+0x80>)
 8001066:	2105      	movs	r1, #5
 8001068:	0018      	movs	r0, r3
 800106a:	f001 fdbd 	bl	8002be8 <HAL_I2CEx_ConfigDigitalFilter>
 800106e:	1e03      	subs	r3, r0, #0
 8001070:	d001      	beq.n	8001076 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001072:	f000 fa61 	bl	8001538 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_I2C1_Init+0x88>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <MX_I2C1_Init+0x88>)
 800107c:	4905      	ldr	r1, [pc, #20]	; (8001094 <MX_I2C1_Init+0x8c>)
 800107e:	430a      	orrs	r2, r1
 8001080:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000028 	.word	0x20000028
 800108c:	40005400 	.word	0x40005400
 8001090:	40010000 	.word	0x40010000
 8001094:	aaaa0100 	.word	0xaaaa0100

08001098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_GPIO_Init+0x64>)
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_GPIO_Init+0x64>)
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	03c9      	lsls	r1, r1, #15
 80010a8:	430a      	orrs	r2, r1
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_GPIO_Init+0x64>)
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	03db      	lsls	r3, r3, #15
 80010b4:	4013      	ands	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_GPIO_Init+0x64>)
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_GPIO_Init+0x64>)
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	0289      	lsls	r1, r1, #10
 80010c4:	430a      	orrs	r2, r1
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_GPIO_Init+0x64>)
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	029b      	lsls	r3, r3, #10
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_GPIO_Init+0x64>)
 80010d8:	695a      	ldr	r2, [r3, #20]
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_GPIO_Init+0x64>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	02c9      	lsls	r1, r1, #11
 80010e0:	430a      	orrs	r2, r1
 80010e2:	615a      	str	r2, [r3, #20]
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <MX_GPIO_Init+0x64>)
 80010e6:	695a      	ldr	r2, [r3, #20]
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	02db      	lsls	r3, r3, #11
 80010ec:	4013      	ands	r3, r2
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b004      	add	sp, #16
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	40021000 	.word	0x40021000

08001100 <MPU6050_Init>:

/* USER CODE BEGIN 4 */


void MPU6050_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16

	uint8_t check[1];
	uint8_t Data[1];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check[0], 1, 1000);
 8001106:	4835      	ldr	r0, [pc, #212]	; (80011dc <MPU6050_Init+0xdc>)
 8001108:	23fa      	movs	r3, #250	; 0xfa
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	2301      	movs	r3, #1
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	2275      	movs	r2, #117	; 0x75
 800111a:	21d0      	movs	r1, #208	; 0xd0
 800111c:	f001 f926 	bl	800236c <HAL_I2C_Mem_Read>


	result = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check[0], 1, 1000);
 8001120:	482e      	ldr	r0, [pc, #184]	; (80011dc <MPU6050_Init+0xdc>)
 8001122:	23fa      	movs	r3, #250	; 0xfa
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2301      	movs	r3, #1
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2301      	movs	r3, #1
 8001132:	2275      	movs	r2, #117	; 0x75
 8001134:	21d0      	movs	r1, #208	; 0xd0
 8001136:	f001 f919 	bl	800236c <HAL_I2C_Mem_Read>
 800113a:	0003      	movs	r3, r0
 800113c:	001a      	movs	r2, r3
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <MPU6050_Init+0xe0>)
 8001140:	701a      	strb	r2, [r3, #0]

	z = check[0];
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	001a      	movs	r2, r3
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <MPU6050_Init+0xe4>)
 800114a:	601a      	str	r2, [r3, #0]

	if (check[0] == 104){
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b68      	cmp	r3, #104	; 0x68
 8001152:	d13f      	bne.n	80011d4 <MPU6050_Init+0xd4>

		Data[0] = 0x00;
 8001154:	003b      	movs	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data[0], 1, 1000);
 800115a:	4820      	ldr	r0, [pc, #128]	; (80011dc <MPU6050_Init+0xdc>)
 800115c:	23fa      	movs	r3, #250	; 0xfa
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	9302      	str	r3, [sp, #8]
 8001162:	2301      	movs	r3, #1
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	003b      	movs	r3, r7
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	226b      	movs	r2, #107	; 0x6b
 800116e:	21d0      	movs	r1, #208	; 0xd0
 8001170:	f000 ffce 	bl	8002110 <HAL_I2C_Mem_Write>

		Data[0] = 0x07;
 8001174:	003b      	movs	r3, r7
 8001176:	2207      	movs	r2, #7
 8001178:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data[0], 1, 1000);
 800117a:	4818      	ldr	r0, [pc, #96]	; (80011dc <MPU6050_Init+0xdc>)
 800117c:	23fa      	movs	r3, #250	; 0xfa
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	003b      	movs	r3, r7
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	2219      	movs	r2, #25
 800118e:	21d0      	movs	r1, #208	; 0xd0
 8001190:	f000 ffbe 	bl	8002110 <HAL_I2C_Mem_Write>

		Data[0] = 0x00;
 8001194:	003b      	movs	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data[0], 1, 1000);
 800119a:	4810      	ldr	r0, [pc, #64]	; (80011dc <MPU6050_Init+0xdc>)
 800119c:	23fa      	movs	r3, #250	; 0xfa
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	9302      	str	r3, [sp, #8]
 80011a2:	2301      	movs	r3, #1
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	003b      	movs	r3, r7
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	221b      	movs	r2, #27
 80011ae:	21d0      	movs	r1, #208	; 0xd0
 80011b0:	f000 ffae 	bl	8002110 <HAL_I2C_Mem_Write>

		Data[0] = 0x00;
 80011b4:	003b      	movs	r3, r7
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data[0], 1, 1000);
 80011ba:	4808      	ldr	r0, [pc, #32]	; (80011dc <MPU6050_Init+0xdc>)
 80011bc:	23fa      	movs	r3, #250	; 0xfa
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	003b      	movs	r3, r7
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	221c      	movs	r2, #28
 80011ce:	21d0      	movs	r1, #208	; 0xd0
 80011d0:	f000 ff9e 	bl	8002110 <HAL_I2C_Mem_Write>
	}


}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000028 	.word	0x20000028
 80011e0:	20000074 	.word	0x20000074
 80011e4:	20000564 	.word	0x20000564

080011e8 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af02      	add	r7, sp, #8
	uint8_t Rec_Data[6];

	  Rec_Data[0] = 0X3B;
 80011ee:	003b      	movs	r3, r7
 80011f0:	223b      	movs	r2, #59	; 0x3b
 80011f2:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, Rec_Data, 1, 5000);
 80011f4:	003a      	movs	r2, r7
 80011f6:	4836      	ldr	r0, [pc, #216]	; (80012d0 <MPU6050_Read_Accel+0xe8>)
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <MPU6050_Read_Accel+0xec>)
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	21d0      	movs	r1, #208	; 0xd0
 8001200:	f000 fd76 	bl	8001cf0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, Rec_Data, 6, 5000);
 8001204:	003a      	movs	r2, r7
 8001206:	4832      	ldr	r0, [pc, #200]	; (80012d0 <MPU6050_Read_Accel+0xe8>)
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <MPU6050_Read_Accel+0xec>)
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2306      	movs	r3, #6
 800120e:	21d0      	movs	r1, #208	; 0xd0
 8001210:	f000 fe76 	bl	8001f00 <HAL_I2C_Master_Receive>



	ACCEL_X = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001214:	003b      	movs	r3, r7
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	003b      	movs	r3, r7
 800121e:	785b      	ldrb	r3, [r3, #1]
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21a      	sxth	r2, r3
 8001226:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <MPU6050_Read_Accel+0xf0>)
 8001228:	801a      	strh	r2, [r3, #0]
	ACCEL_Y = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800122a:	003b      	movs	r3, r7
 800122c:	789b      	ldrb	r3, [r3, #2]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	003b      	movs	r3, r7
 8001234:	78db      	ldrb	r3, [r3, #3]
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b21a      	sxth	r2, r3
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <MPU6050_Read_Accel+0xf4>)
 800123e:	801a      	strh	r2, [r3, #0]
	ACCEL_Z = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001240:	003b      	movs	r3, r7
 8001242:	791b      	ldrb	r3, [r3, #4]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21a      	sxth	r2, r3
 8001248:	003b      	movs	r3, r7
 800124a:	795b      	ldrb	r3, [r3, #5]
 800124c:	b21b      	sxth	r3, r3
 800124e:	4313      	orrs	r3, r2
 8001250:	b21a      	sxth	r2, r3
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <MPU6050_Read_Accel+0xf8>)
 8001254:	801a      	strh	r2, [r3, #0]

	AX = ACCEL_X/16384.0;
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <MPU6050_Read_Accel+0xf0>)
 8001258:	2200      	movs	r2, #0
 800125a:	5e9b      	ldrsh	r3, [r3, r2]
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff fd8b 	bl	8000d78 <__aeabi_i2d>
 8001262:	2200      	movs	r2, #0
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MPU6050_Read_Accel+0xfc>)
 8001266:	f7ff fa91 	bl	800078c <__aeabi_ddiv>
 800126a:	0002      	movs	r2, r0
 800126c:	000b      	movs	r3, r1
 800126e:	0010      	movs	r0, r2
 8001270:	0019      	movs	r1, r3
 8001272:	f7ff fdb1 	bl	8000dd8 <__aeabi_d2f>
 8001276:	1c02      	adds	r2, r0, #0
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MPU6050_Read_Accel+0x100>)
 800127a:	601a      	str	r2, [r3, #0]
	AY = ACCEL_Y/16384.0;
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MPU6050_Read_Accel+0xf4>)
 800127e:	2200      	movs	r2, #0
 8001280:	5e9b      	ldrsh	r3, [r3, r2]
 8001282:	0018      	movs	r0, r3
 8001284:	f7ff fd78 	bl	8000d78 <__aeabi_i2d>
 8001288:	2200      	movs	r2, #0
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MPU6050_Read_Accel+0xfc>)
 800128c:	f7ff fa7e 	bl	800078c <__aeabi_ddiv>
 8001290:	0002      	movs	r2, r0
 8001292:	000b      	movs	r3, r1
 8001294:	0010      	movs	r0, r2
 8001296:	0019      	movs	r1, r3
 8001298:	f7ff fd9e 	bl	8000dd8 <__aeabi_d2f>
 800129c:	1c02      	adds	r2, r0, #0
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MPU6050_Read_Accel+0x104>)
 80012a0:	601a      	str	r2, [r3, #0]
	AZ = ACCEL_Z/16384.0;
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MPU6050_Read_Accel+0xf8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	5e9b      	ldrsh	r3, [r3, r2]
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7ff fd65 	bl	8000d78 <__aeabi_i2d>
 80012ae:	2200      	movs	r2, #0
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MPU6050_Read_Accel+0xfc>)
 80012b2:	f7ff fa6b 	bl	800078c <__aeabi_ddiv>
 80012b6:	0002      	movs	r2, r0
 80012b8:	000b      	movs	r3, r1
 80012ba:	0010      	movs	r0, r2
 80012bc:	0019      	movs	r1, r3
 80012be:	f7ff fd8b 	bl	8000dd8 <__aeabi_d2f>
 80012c2:	1c02      	adds	r2, r0, #0
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MPU6050_Read_Accel+0x108>)
 80012c6:	601a      	str	r2, [r3, #0]


}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b002      	add	sp, #8
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000028 	.word	0x20000028
 80012d4:	00001388 	.word	0x00001388
 80012d8:	2000007c 	.word	0x2000007c
 80012dc:	2000007e 	.word	0x2000007e
 80012e0:	20000080 	.word	0x20000080
 80012e4:	40d00000 	.word	0x40d00000
 80012e8:	20000090 	.word	0x20000090
 80012ec:	20000094 	.word	0x20000094
 80012f0:	20000098 	.word	0x20000098

080012f4 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af02      	add	r7, sp, #8
	  uint8_t Rec_Data2[6];

	  Rec_Data2[0]=0x43;
 80012fa:	003b      	movs	r3, r7
 80012fc:	2243      	movs	r2, #67	; 0x43
 80012fe:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, Rec_Data2, 1, 5000);
 8001300:	003a      	movs	r2, r7
 8001302:	4877      	ldr	r0, [pc, #476]	; (80014e0 <MPU6050_Read_Gyro+0x1ec>)
 8001304:	4b77      	ldr	r3, [pc, #476]	; (80014e4 <MPU6050_Read_Gyro+0x1f0>)
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2301      	movs	r3, #1
 800130a:	21d0      	movs	r1, #208	; 0xd0
 800130c:	f000 fcf0 	bl	8001cf0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, Rec_Data2, 6, 5000);
 8001310:	003a      	movs	r2, r7
 8001312:	4873      	ldr	r0, [pc, #460]	; (80014e0 <MPU6050_Read_Gyro+0x1ec>)
 8001314:	4b73      	ldr	r3, [pc, #460]	; (80014e4 <MPU6050_Read_Gyro+0x1f0>)
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2306      	movs	r3, #6
 800131a:	21d0      	movs	r1, #208	; 0xd0
 800131c:	f000 fdf0 	bl	8001f00 <HAL_I2C_Master_Receive>

	  GYRO_X = (int16_t)(Rec_Data2[0] << 8 | Rec_Data2[1]);
 8001320:	003b      	movs	r3, r7
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21a      	sxth	r2, r3
 8001328:	003b      	movs	r3, r7
 800132a:	785b      	ldrb	r3, [r3, #1]
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21a      	sxth	r2, r3
 8001332:	4b6d      	ldr	r3, [pc, #436]	; (80014e8 <MPU6050_Read_Gyro+0x1f4>)
 8001334:	801a      	strh	r2, [r3, #0]
	  GX = GYRO_X/131.1;
 8001336:	4b6c      	ldr	r3, [pc, #432]	; (80014e8 <MPU6050_Read_Gyro+0x1f4>)
 8001338:	2200      	movs	r2, #0
 800133a:	5e9b      	ldrsh	r3, [r3, r2]
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff fd1b 	bl	8000d78 <__aeabi_i2d>
 8001342:	4a6a      	ldr	r2, [pc, #424]	; (80014ec <MPU6050_Read_Gyro+0x1f8>)
 8001344:	4b6a      	ldr	r3, [pc, #424]	; (80014f0 <MPU6050_Read_Gyro+0x1fc>)
 8001346:	f7ff fa21 	bl	800078c <__aeabi_ddiv>
 800134a:	0002      	movs	r2, r0
 800134c:	000b      	movs	r3, r1
 800134e:	0010      	movs	r0, r2
 8001350:	0019      	movs	r1, r3
 8001352:	f7ff fd41 	bl	8000dd8 <__aeabi_d2f>
 8001356:	1c02      	adds	r2, r0, #0
 8001358:	4b66      	ldr	r3, [pc, #408]	; (80014f4 <MPU6050_Read_Gyro+0x200>)
 800135a:	601a      	str	r2, [r3, #0]
	  mean_GX[i] = GX;
 800135c:	4b66      	ldr	r3, [pc, #408]	; (80014f8 <MPU6050_Read_Gyro+0x204>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b64      	ldr	r3, [pc, #400]	; (80014f4 <MPU6050_Read_Gyro+0x200>)
 8001362:	6819      	ldr	r1, [r3, #0]
 8001364:	4b65      	ldr	r3, [pc, #404]	; (80014fc <MPU6050_Read_Gyro+0x208>)
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	50d1      	str	r1, [r2, r3]
	  i++;
 800136a:	4b63      	ldr	r3, [pc, #396]	; (80014f8 <MPU6050_Read_Gyro+0x204>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	4b61      	ldr	r3, [pc, #388]	; (80014f8 <MPU6050_Read_Gyro+0x204>)
 8001372:	601a      	str	r2, [r3, #0]

	  GYRO_Y = (int16_t)(Rec_Data2[2] << 8 | Rec_Data2[3]);
 8001374:	003b      	movs	r3, r7
 8001376:	789b      	ldrb	r3, [r3, #2]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21a      	sxth	r2, r3
 800137c:	003b      	movs	r3, r7
 800137e:	78db      	ldrb	r3, [r3, #3]
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21a      	sxth	r2, r3
 8001386:	4b5e      	ldr	r3, [pc, #376]	; (8001500 <MPU6050_Read_Gyro+0x20c>)
 8001388:	801a      	strh	r2, [r3, #0]
	  GY = GYRO_Y/131.1;
 800138a:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <MPU6050_Read_Gyro+0x20c>)
 800138c:	2200      	movs	r2, #0
 800138e:	5e9b      	ldrsh	r3, [r3, r2]
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff fcf1 	bl	8000d78 <__aeabi_i2d>
 8001396:	4a55      	ldr	r2, [pc, #340]	; (80014ec <MPU6050_Read_Gyro+0x1f8>)
 8001398:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <MPU6050_Read_Gyro+0x1fc>)
 800139a:	f7ff f9f7 	bl	800078c <__aeabi_ddiv>
 800139e:	0002      	movs	r2, r0
 80013a0:	000b      	movs	r3, r1
 80013a2:	0010      	movs	r0, r2
 80013a4:	0019      	movs	r1, r3
 80013a6:	f7ff fd17 	bl	8000dd8 <__aeabi_d2f>
 80013aa:	1c02      	adds	r2, r0, #0
 80013ac:	4b55      	ldr	r3, [pc, #340]	; (8001504 <MPU6050_Read_Gyro+0x210>)
 80013ae:	601a      	str	r2, [r3, #0]
	  mean_GY[i] = GY;
 80013b0:	4b51      	ldr	r3, [pc, #324]	; (80014f8 <MPU6050_Read_Gyro+0x204>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b53      	ldr	r3, [pc, #332]	; (8001504 <MPU6050_Read_Gyro+0x210>)
 80013b6:	6819      	ldr	r1, [r3, #0]
 80013b8:	4b53      	ldr	r3, [pc, #332]	; (8001508 <MPU6050_Read_Gyro+0x214>)
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	50d1      	str	r1, [r2, r3]


	  GYRO_Z = (int16_t)(Rec_Data2[4] << 8 | Rec_Data2[5]);
 80013be:	003b      	movs	r3, r7
 80013c0:	791b      	ldrb	r3, [r3, #4]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	003b      	movs	r3, r7
 80013c8:	795b      	ldrb	r3, [r3, #5]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b4e      	ldr	r3, [pc, #312]	; (800150c <MPU6050_Read_Gyro+0x218>)
 80013d2:	801a      	strh	r2, [r3, #0]
	  GZ = GYRO_Z/131.1;
 80013d4:	4b4d      	ldr	r3, [pc, #308]	; (800150c <MPU6050_Read_Gyro+0x218>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	5e9b      	ldrsh	r3, [r3, r2]
 80013da:	0018      	movs	r0, r3
 80013dc:	f7ff fccc 	bl	8000d78 <__aeabi_i2d>
 80013e0:	4a42      	ldr	r2, [pc, #264]	; (80014ec <MPU6050_Read_Gyro+0x1f8>)
 80013e2:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <MPU6050_Read_Gyro+0x1fc>)
 80013e4:	f7ff f9d2 	bl	800078c <__aeabi_ddiv>
 80013e8:	0002      	movs	r2, r0
 80013ea:	000b      	movs	r3, r1
 80013ec:	0010      	movs	r0, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	f7ff fcf2 	bl	8000dd8 <__aeabi_d2f>
 80013f4:	1c02      	adds	r2, r0, #0
 80013f6:	4b46      	ldr	r3, [pc, #280]	; (8001510 <MPU6050_Read_Gyro+0x21c>)
 80013f8:	601a      	str	r2, [r3, #0]
	  mean_GZ[i] = GZ;
 80013fa:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <MPU6050_Read_Gyro+0x204>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b44      	ldr	r3, [pc, #272]	; (8001510 <MPU6050_Read_Gyro+0x21c>)
 8001400:	6819      	ldr	r1, [r3, #0]
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <MPU6050_Read_Gyro+0x220>)
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	50d1      	str	r1, [r2, r3]



	  if (i >= 100)
 8001408:	4b3b      	ldr	r3, [pc, #236]	; (80014f8 <MPU6050_Read_Gyro+0x204>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b63      	cmp	r3, #99	; 0x63
 800140e:	dd63      	ble.n	80014d8 <MPU6050_Read_Gyro+0x1e4>
	  {
		  for(j=0;j<100;j++)
 8001410:	4b41      	ldr	r3, [pc, #260]	; (8001518 <MPU6050_Read_Gyro+0x224>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e031      	b.n	800147c <MPU6050_Read_Gyro+0x188>
		  {
		  sumx = sumx + mean_GX[j];
 8001418:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <MPU6050_Read_Gyro+0x224>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b37      	ldr	r3, [pc, #220]	; (80014fc <MPU6050_Read_Gyro+0x208>)
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	58d2      	ldr	r2, [r2, r3]
 8001422:	4b3e      	ldr	r3, [pc, #248]	; (800151c <MPU6050_Read_Gyro+0x228>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1c19      	adds	r1, r3, #0
 8001428:	1c10      	adds	r0, r2, #0
 800142a:	f7fe fef9 	bl	8000220 <__aeabi_fadd>
 800142e:	1c03      	adds	r3, r0, #0
 8001430:	1c1a      	adds	r2, r3, #0
 8001432:	4b3a      	ldr	r3, [pc, #232]	; (800151c <MPU6050_Read_Gyro+0x228>)
 8001434:	601a      	str	r2, [r3, #0]
		  sumy = sumy + mean_GY[j];
 8001436:	4b38      	ldr	r3, [pc, #224]	; (8001518 <MPU6050_Read_Gyro+0x224>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b33      	ldr	r3, [pc, #204]	; (8001508 <MPU6050_Read_Gyro+0x214>)
 800143c:	0092      	lsls	r2, r2, #2
 800143e:	58d2      	ldr	r2, [r2, r3]
 8001440:	4b37      	ldr	r3, [pc, #220]	; (8001520 <MPU6050_Read_Gyro+0x22c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	1c19      	adds	r1, r3, #0
 8001446:	1c10      	adds	r0, r2, #0
 8001448:	f7fe feea 	bl	8000220 <__aeabi_fadd>
 800144c:	1c03      	adds	r3, r0, #0
 800144e:	1c1a      	adds	r2, r3, #0
 8001450:	4b33      	ldr	r3, [pc, #204]	; (8001520 <MPU6050_Read_Gyro+0x22c>)
 8001452:	601a      	str	r2, [r3, #0]
		  sumz = sumz + mean_GZ[j];
 8001454:	4b30      	ldr	r3, [pc, #192]	; (8001518 <MPU6050_Read_Gyro+0x224>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <MPU6050_Read_Gyro+0x220>)
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	58d2      	ldr	r2, [r2, r3]
 800145e:	4b31      	ldr	r3, [pc, #196]	; (8001524 <MPU6050_Read_Gyro+0x230>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	1c19      	adds	r1, r3, #0
 8001464:	1c10      	adds	r0, r2, #0
 8001466:	f7fe fedb 	bl	8000220 <__aeabi_fadd>
 800146a:	1c03      	adds	r3, r0, #0
 800146c:	1c1a      	adds	r2, r3, #0
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MPU6050_Read_Gyro+0x230>)
 8001470:	601a      	str	r2, [r3, #0]
		  for(j=0;j<100;j++)
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <MPU6050_Read_Gyro+0x224>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <MPU6050_Read_Gyro+0x224>)
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <MPU6050_Read_Gyro+0x224>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b63      	cmp	r3, #99	; 0x63
 8001482:	ddc9      	ble.n	8001418 <MPU6050_Read_Gyro+0x124>
		  }
		  avg_GX = sumx / 100;
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <MPU6050_Read_Gyro+0x228>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4927      	ldr	r1, [pc, #156]	; (8001528 <MPU6050_Read_Gyro+0x234>)
 800148a:	1c18      	adds	r0, r3, #0
 800148c:	f7ff f866 	bl	800055c <__aeabi_fdiv>
 8001490:	1c03      	adds	r3, r0, #0
 8001492:	1c1a      	adds	r2, r3, #0
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <MPU6050_Read_Gyro+0x238>)
 8001496:	601a      	str	r2, [r3, #0]
		  avg_GY = sumy / 100;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MPU6050_Read_Gyro+0x22c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4922      	ldr	r1, [pc, #136]	; (8001528 <MPU6050_Read_Gyro+0x234>)
 800149e:	1c18      	adds	r0, r3, #0
 80014a0:	f7ff f85c 	bl	800055c <__aeabi_fdiv>
 80014a4:	1c03      	adds	r3, r0, #0
 80014a6:	1c1a      	adds	r2, r3, #0
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <MPU6050_Read_Gyro+0x23c>)
 80014aa:	601a      	str	r2, [r3, #0]
		  avg_GZ = sumz / 100;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <MPU6050_Read_Gyro+0x230>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	491d      	ldr	r1, [pc, #116]	; (8001528 <MPU6050_Read_Gyro+0x234>)
 80014b2:	1c18      	adds	r0, r3, #0
 80014b4:	f7ff f852 	bl	800055c <__aeabi_fdiv>
 80014b8:	1c03      	adds	r3, r0, #0
 80014ba:	1c1a      	adds	r2, r3, #0
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <MPU6050_Read_Gyro+0x240>)
 80014be:	601a      	str	r2, [r3, #0]

		  i=0;
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <MPU6050_Read_Gyro+0x204>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
		  sumx = 0;
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <MPU6050_Read_Gyro+0x228>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
		  sumy = 0;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MPU6050_Read_Gyro+0x22c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
		  sumz = 0;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MPU6050_Read_Gyro+0x230>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
	  }


}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b002      	add	sp, #8
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000028 	.word	0x20000028
 80014e4:	00001388 	.word	0x00001388
 80014e8:	20000076 	.word	0x20000076
 80014ec:	33333333 	.word	0x33333333
 80014f0:	40606333 	.word	0x40606333
 80014f4:	20000084 	.word	0x20000084
 80014f8:	20000568 	.word	0x20000568
 80014fc:	2000009c 	.word	0x2000009c
 8001500:	20000078 	.word	0x20000078
 8001504:	20000088 	.word	0x20000088
 8001508:	2000022c 	.word	0x2000022c
 800150c:	2000007a 	.word	0x2000007a
 8001510:	2000008c 	.word	0x2000008c
 8001514:	200003bc 	.word	0x200003bc
 8001518:	2000056c 	.word	0x2000056c
 800151c:	2000054c 	.word	0x2000054c
 8001520:	20000550 	.word	0x20000550
 8001524:	20000554 	.word	0x20000554
 8001528:	42c80000 	.word	0x42c80000
 800152c:	20000558 	.word	0x20000558
 8001530:	2000055c 	.word	0x2000055c
 8001534:	20000560 	.word	0x20000560

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>
	...

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_MspInit+0x44>)
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_MspInit+0x44>)
 8001550:	2101      	movs	r1, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	619a      	str	r2, [r3, #24]
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_MspInit+0x44>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2201      	movs	r2, #1
 800155c:	4013      	ands	r3, r2
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_MspInit+0x44>)
 8001564:	69da      	ldr	r2, [r3, #28]
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_MspInit+0x44>)
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	0549      	lsls	r1, r1, #21
 800156c:	430a      	orrs	r2, r1
 800156e:	61da      	str	r2, [r3, #28]
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_MspInit+0x44>)
 8001572:	69da      	ldr	r2, [r3, #28]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	055b      	lsls	r3, r3, #21
 8001578:	4013      	ands	r3, r2
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b002      	add	sp, #8
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	40021000 	.word	0x40021000

0800158c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b08b      	sub	sp, #44	; 0x2c
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	2414      	movs	r4, #20
 8001596:	193b      	adds	r3, r7, r4
 8001598:	0018      	movs	r0, r3
 800159a:	2314      	movs	r3, #20
 800159c:	001a      	movs	r2, r3
 800159e:	2100      	movs	r1, #0
 80015a0:	f002 f8bc 	bl	800371c <memset>
  if(hi2c->Instance==I2C1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1c      	ldr	r2, [pc, #112]	; (800161c <HAL_I2C_MspInit+0x90>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d131      	bne.n	8001612 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <HAL_I2C_MspInit+0x94>)
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_I2C_MspInit+0x94>)
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	02c9      	lsls	r1, r1, #11
 80015b8:	430a      	orrs	r2, r1
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_I2C_MspInit+0x94>)
 80015be:	695a      	ldr	r2, [r3, #20]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	02db      	lsls	r3, r3, #11
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ca:	0021      	movs	r1, r4
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	22c0      	movs	r2, #192	; 0xc0
 80015d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2212      	movs	r2, #18
 80015d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	2201      	movs	r2, #1
 80015dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	2203      	movs	r2, #3
 80015e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	2201      	movs	r2, #1
 80015e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <HAL_I2C_MspInit+0x98>)
 80015ee:	0019      	movs	r1, r3
 80015f0:	0010      	movs	r0, r2
 80015f2:	f000 f977 	bl	80018e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_I2C_MspInit+0x94>)
 80015f8:	69da      	ldr	r2, [r3, #28]
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_I2C_MspInit+0x94>)
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	0389      	lsls	r1, r1, #14
 8001600:	430a      	orrs	r2, r1
 8001602:	61da      	str	r2, [r3, #28]
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_I2C_MspInit+0x94>)
 8001606:	69da      	ldr	r2, [r3, #28]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	039b      	lsls	r3, r3, #14
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b00b      	add	sp, #44	; 0x2c
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	40005400 	.word	0x40005400
 8001620:	40021000 	.word	0x40021000
 8001624:	48000400 	.word	0x48000400

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164c:	f000 f87a 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001662:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <LoopForever+0x6>)
  ldr r1, =_edata
 8001666:	490e      	ldr	r1, [pc, #56]	; (80016a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <LoopForever+0xe>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800167c:	4c0b      	ldr	r4, [pc, #44]	; (80016ac <LoopForever+0x16>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800168a:	f7ff ffe4 	bl	8001656 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800168e:	f002 f821 	bl	80036d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001692:	f7ff fc47 	bl	8000f24 <main>

08001696 <LoopForever>:

LoopForever:
    b LoopForever
 8001696:	e7fe      	b.n	8001696 <LoopForever>
  ldr   r0, =_estack
 8001698:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016a4:	0800383c 	.word	0x0800383c
  ldr r2, =_sbss
 80016a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016ac:	20000574 	.word	0x20000574

080016b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC1_COMP_IRQHandler>
	...

080016b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <HAL_Init+0x24>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_Init+0x24>)
 80016be:	2110      	movs	r1, #16
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f809 	bl	80016dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ca:	f7ff ff3b 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	0018      	movs	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	40022000 	.word	0x40022000

080016dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_InitTick+0x5c>)
 80016e6:	681c      	ldr	r4, [r3, #0]
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_InitTick+0x60>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	0019      	movs	r1, r3
 80016ee:	23fa      	movs	r3, #250	; 0xfa
 80016f0:	0098      	lsls	r0, r3, #2
 80016f2:	f7fe fd09 	bl	8000108 <__udivsi3>
 80016f6:	0003      	movs	r3, r0
 80016f8:	0019      	movs	r1, r3
 80016fa:	0020      	movs	r0, r4
 80016fc:	f7fe fd04 	bl	8000108 <__udivsi3>
 8001700:	0003      	movs	r3, r0
 8001702:	0018      	movs	r0, r3
 8001704:	f000 f8e1 	bl	80018ca <HAL_SYSTICK_Config>
 8001708:	1e03      	subs	r3, r0, #0
 800170a:	d001      	beq.n	8001710 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e00f      	b.n	8001730 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b03      	cmp	r3, #3
 8001714:	d80b      	bhi.n	800172e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	2301      	movs	r3, #1
 800171a:	425b      	negs	r3, r3
 800171c:	2200      	movs	r2, #0
 800171e:	0018      	movs	r0, r3
 8001720:	f000 f8be 	bl	80018a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_InitTick+0x64>)
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b003      	add	sp, #12
 8001736:	bd90      	pop	{r4, r7, pc}
 8001738:	20000000 	.word	0x20000000
 800173c:	20000008 	.word	0x20000008
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_IncTick+0x1c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	001a      	movs	r2, r3
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_IncTick+0x20>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	18d2      	adds	r2, r2, r3
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_IncTick+0x20>)
 8001756:	601a      	str	r2, [r3, #0]
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	20000008 	.word	0x20000008
 8001764:	20000570 	.word	0x20000570

08001768 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <HAL_GetTick+0x10>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	0018      	movs	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	20000570 	.word	0x20000570

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	0002      	movs	r2, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	1dfb      	adds	r3, r7, #7
 8001788:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b7f      	cmp	r3, #127	; 0x7f
 8001790:	d828      	bhi.n	80017e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001792:	4a2f      	ldr	r2, [pc, #188]	; (8001850 <__NVIC_SetPriority+0xd4>)
 8001794:	1dfb      	adds	r3, r7, #7
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b25b      	sxtb	r3, r3
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	33c0      	adds	r3, #192	; 0xc0
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	589b      	ldr	r3, [r3, r2]
 80017a2:	1dfa      	adds	r2, r7, #7
 80017a4:	7812      	ldrb	r2, [r2, #0]
 80017a6:	0011      	movs	r1, r2
 80017a8:	2203      	movs	r2, #3
 80017aa:	400a      	ands	r2, r1
 80017ac:	00d2      	lsls	r2, r2, #3
 80017ae:	21ff      	movs	r1, #255	; 0xff
 80017b0:	4091      	lsls	r1, r2
 80017b2:	000a      	movs	r2, r1
 80017b4:	43d2      	mvns	r2, r2
 80017b6:	401a      	ands	r2, r3
 80017b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	22ff      	movs	r2, #255	; 0xff
 80017c0:	401a      	ands	r2, r3
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	0018      	movs	r0, r3
 80017c8:	2303      	movs	r3, #3
 80017ca:	4003      	ands	r3, r0
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d0:	481f      	ldr	r0, [pc, #124]	; (8001850 <__NVIC_SetPriority+0xd4>)
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	430a      	orrs	r2, r1
 80017dc:	33c0      	adds	r3, #192	; 0xc0
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017e2:	e031      	b.n	8001848 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017e4:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <__NVIC_SetPriority+0xd8>)
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	0019      	movs	r1, r3
 80017ec:	230f      	movs	r3, #15
 80017ee:	400b      	ands	r3, r1
 80017f0:	3b08      	subs	r3, #8
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3306      	adds	r3, #6
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	18d3      	adds	r3, r2, r3
 80017fa:	3304      	adds	r3, #4
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	1dfa      	adds	r2, r7, #7
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	0011      	movs	r1, r2
 8001804:	2203      	movs	r2, #3
 8001806:	400a      	ands	r2, r1
 8001808:	00d2      	lsls	r2, r2, #3
 800180a:	21ff      	movs	r1, #255	; 0xff
 800180c:	4091      	lsls	r1, r2
 800180e:	000a      	movs	r2, r1
 8001810:	43d2      	mvns	r2, r2
 8001812:	401a      	ands	r2, r3
 8001814:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	019b      	lsls	r3, r3, #6
 800181a:	22ff      	movs	r2, #255	; 0xff
 800181c:	401a      	ands	r2, r3
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	0018      	movs	r0, r3
 8001824:	2303      	movs	r3, #3
 8001826:	4003      	ands	r3, r0
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800182c:	4809      	ldr	r0, [pc, #36]	; (8001854 <__NVIC_SetPriority+0xd8>)
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	001c      	movs	r4, r3
 8001834:	230f      	movs	r3, #15
 8001836:	4023      	ands	r3, r4
 8001838:	3b08      	subs	r3, #8
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	430a      	orrs	r2, r1
 800183e:	3306      	adds	r3, #6
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	18c3      	adds	r3, r0, r3
 8001844:	3304      	adds	r3, #4
 8001846:	601a      	str	r2, [r3, #0]
}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b003      	add	sp, #12
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	1e5a      	subs	r2, r3, #1
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	045b      	lsls	r3, r3, #17
 8001868:	429a      	cmp	r2, r3
 800186a:	d301      	bcc.n	8001870 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186c:	2301      	movs	r3, #1
 800186e:	e010      	b.n	8001892 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <SysTick_Config+0x44>)
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	3a01      	subs	r2, #1
 8001876:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001878:	2301      	movs	r3, #1
 800187a:	425b      	negs	r3, r3
 800187c:	2103      	movs	r1, #3
 800187e:	0018      	movs	r0, r3
 8001880:	f7ff ff7c 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <SysTick_Config+0x44>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <SysTick_Config+0x44>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	210f      	movs	r1, #15
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	1c02      	adds	r2, r0, #0
 80018b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	0011      	movs	r1, r2
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff ff5d 	bl	800177c <__NVIC_SetPriority>
}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b004      	add	sp, #16
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff ffbf 	bl	8001858 <SysTick_Config>
 80018da:	0003      	movs	r3, r0
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f2:	e14f      	b.n	8001b94 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2101      	movs	r1, #1
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4091      	lsls	r1, r2
 80018fe:	000a      	movs	r2, r1
 8001900:	4013      	ands	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d100      	bne.n	800190c <HAL_GPIO_Init+0x28>
 800190a:	e140      	b.n	8001b8e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2203      	movs	r2, #3
 8001912:	4013      	ands	r3, r2
 8001914:	2b01      	cmp	r3, #1
 8001916:	d005      	beq.n	8001924 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2203      	movs	r2, #3
 800191e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001920:	2b02      	cmp	r3, #2
 8001922:	d130      	bne.n	8001986 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	409a      	lsls	r2, r3
 8001932:	0013      	movs	r3, r2
 8001934:	43da      	mvns	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	409a      	lsls	r2, r3
 8001946:	0013      	movs	r3, r2
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800195a:	2201      	movs	r2, #1
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
 8001960:	0013      	movs	r3, r2
 8001962:	43da      	mvns	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	2201      	movs	r2, #1
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2203      	movs	r2, #3
 800198c:	4013      	ands	r3, r2
 800198e:	2b03      	cmp	r3, #3
 8001990:	d017      	beq.n	80019c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	409a      	lsls	r2, r3
 80019a0:	0013      	movs	r3, r2
 80019a2:	43da      	mvns	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	409a      	lsls	r2, r3
 80019b4:	0013      	movs	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2203      	movs	r2, #3
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d123      	bne.n	8001a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	58d3      	ldr	r3, [r2, r3]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2207      	movs	r2, #7
 80019e0:	4013      	ands	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	43da      	mvns	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2107      	movs	r1, #7
 80019fa:	400b      	ands	r3, r1
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	6939      	ldr	r1, [r7, #16]
 8001a14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	409a      	lsls	r2, r3
 8001a24:	0013      	movs	r3, r2
 8001a26:	43da      	mvns	r2, r3
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2203      	movs	r2, #3
 8001a34:	401a      	ands	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	23c0      	movs	r3, #192	; 0xc0
 8001a50:	029b      	lsls	r3, r3, #10
 8001a52:	4013      	ands	r3, r2
 8001a54:	d100      	bne.n	8001a58 <HAL_GPIO_Init+0x174>
 8001a56:	e09a      	b.n	8001b8e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a58:	4b54      	ldr	r3, [pc, #336]	; (8001bac <HAL_GPIO_Init+0x2c8>)
 8001a5a:	699a      	ldr	r2, [r3, #24]
 8001a5c:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HAL_GPIO_Init+0x2c8>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	430a      	orrs	r2, r1
 8001a62:	619a      	str	r2, [r3, #24]
 8001a64:	4b51      	ldr	r3, [pc, #324]	; (8001bac <HAL_GPIO_Init+0x2c8>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a70:	4a4f      	ldr	r2, [pc, #316]	; (8001bb0 <HAL_GPIO_Init+0x2cc>)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	589b      	ldr	r3, [r3, r2]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2203      	movs	r2, #3
 8001a82:	4013      	ands	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	0013      	movs	r3, r2
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	2390      	movs	r3, #144	; 0x90
 8001a98:	05db      	lsls	r3, r3, #23
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0x1e2>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a44      	ldr	r2, [pc, #272]	; (8001bb4 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_GPIO_Init+0x1de>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a43      	ldr	r2, [pc, #268]	; (8001bb8 <HAL_GPIO_Init+0x2d4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x1da>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a42      	ldr	r2, [pc, #264]	; (8001bbc <HAL_GPIO_Init+0x2d8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_GPIO_Init+0x1d6>
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x1e4>
 8001aba:	2305      	movs	r3, #5
 8001abc:	e004      	b.n	8001ac8 <HAL_GPIO_Init+0x1e4>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e002      	b.n	8001ac8 <HAL_GPIO_Init+0x1e4>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_GPIO_Init+0x1e4>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	2103      	movs	r1, #3
 8001acc:	400a      	ands	r2, r1
 8001ace:	0092      	lsls	r2, r2, #2
 8001ad0:	4093      	lsls	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ad8:	4935      	ldr	r1, [pc, #212]	; (8001bb0 <HAL_GPIO_Init+0x2cc>)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	3302      	adds	r3, #2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae6:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43da      	mvns	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	025b      	lsls	r3, r3, #9
 8001afe:	4013      	ands	r3, r2
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	029b      	lsls	r3, r3, #10
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b34:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43da      	mvns	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	035b      	lsls	r3, r3, #13
 8001b52:	4013      	ands	r3, r2
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43da      	mvns	r2, r3
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	039b      	lsls	r3, r3, #14
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b88:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3301      	adds	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	40da      	lsrs	r2, r3
 8001b9c:	1e13      	subs	r3, r2, #0
 8001b9e:	d000      	beq.n	8001ba2 <HAL_GPIO_Init+0x2be>
 8001ba0:	e6a8      	b.n	80018f4 <HAL_GPIO_Init+0x10>
  } 
}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b006      	add	sp, #24
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	48000400 	.word	0x48000400
 8001bb8:	48000800 	.word	0x48000800
 8001bbc:	48000c00 	.word	0x48000c00
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e082      	b.n	8001cdc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2241      	movs	r2, #65	; 0x41
 8001bda:	5c9b      	ldrb	r3, [r3, r2]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2240      	movs	r2, #64	; 0x40
 8001be6:	2100      	movs	r1, #0
 8001be8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff fccd 	bl	800158c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2241      	movs	r2, #65	; 0x41
 8001bf6:	2124      	movs	r1, #36	; 0x24
 8001bf8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	438a      	bics	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4934      	ldr	r1, [pc, #208]	; (8001ce4 <HAL_I2C_Init+0x120>)
 8001c14:	400a      	ands	r2, r1
 8001c16:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4931      	ldr	r1, [pc, #196]	; (8001ce8 <HAL_I2C_Init+0x124>)
 8001c24:	400a      	ands	r2, r1
 8001c26:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d108      	bne.n	8001c42 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	0209      	lsls	r1, r1, #8
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	e007      	b.n	8001c52 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2184      	movs	r1, #132	; 0x84
 8001c4c:	0209      	lsls	r1, r1, #8
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d104      	bne.n	8001c64 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	491f      	ldr	r1, [pc, #124]	; (8001cec <HAL_I2C_Init+0x128>)
 8001c70:	430a      	orrs	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	491a      	ldr	r1, [pc, #104]	; (8001ce8 <HAL_I2C_Init+0x124>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69d9      	ldr	r1, [r3, #28]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1a      	ldr	r2, [r3, #32]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2241      	movs	r2, #65	; 0x41
 8001cc8:	2120      	movs	r1, #32
 8001cca:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2242      	movs	r2, #66	; 0x42
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b002      	add	sp, #8
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	f0ffffff 	.word	0xf0ffffff
 8001ce8:	ffff7fff 	.word	0xffff7fff
 8001cec:	02008000 	.word	0x02008000

08001cf0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	0008      	movs	r0, r1
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	230a      	movs	r3, #10
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	1c02      	adds	r2, r0, #0
 8001d04:	801a      	strh	r2, [r3, #0]
 8001d06:	2308      	movs	r3, #8
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	1c0a      	adds	r2, r1, #0
 8001d0c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2241      	movs	r2, #65	; 0x41
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	d000      	beq.n	8001d1c <HAL_I2C_Master_Transmit+0x2c>
 8001d1a:	e0e7      	b.n	8001eec <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	5c9b      	ldrb	r3, [r3, r2]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_I2C_Master_Transmit+0x3a>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e0e1      	b.n	8001eee <HAL_I2C_Master_Transmit+0x1fe>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2240      	movs	r2, #64	; 0x40
 8001d2e:	2101      	movs	r1, #1
 8001d30:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d32:	f7ff fd19 	bl	8001768 <HAL_GetTick>
 8001d36:	0003      	movs	r3, r0
 8001d38:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	0219      	lsls	r1, r3, #8
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2319      	movs	r3, #25
 8001d46:	2201      	movs	r2, #1
 8001d48:	f000 fd2c 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8001d4c:	1e03      	subs	r3, r0, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0cc      	b.n	8001eee <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2241      	movs	r2, #65	; 0x41
 8001d58:	2121      	movs	r1, #33	; 0x21
 8001d5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2242      	movs	r2, #66	; 0x42
 8001d60:	2110      	movs	r1, #16
 8001d62:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2208      	movs	r2, #8
 8001d74:	18ba      	adds	r2, r7, r2
 8001d76:	8812      	ldrh	r2, [r2, #0]
 8001d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2bff      	cmp	r3, #255	; 0xff
 8001d88:	d911      	bls.n	8001dae <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	22ff      	movs	r2, #255	; 0xff
 8001d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	045c      	lsls	r4, r3, #17
 8001d9a:	230a      	movs	r3, #10
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	8819      	ldrh	r1, [r3, #0]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	4b55      	ldr	r3, [pc, #340]	; (8001ef8 <HAL_I2C_Master_Transmit+0x208>)
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	0023      	movs	r3, r4
 8001da8:	f000 fe9c 	bl	8002ae4 <I2C_TransferConfig>
 8001dac:	e075      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	049c      	lsls	r4, r3, #18
 8001dc2:	230a      	movs	r3, #10
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	8819      	ldrh	r1, [r3, #0]
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	4b4b      	ldr	r3, [pc, #300]	; (8001ef8 <HAL_I2C_Master_Transmit+0x208>)
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	0023      	movs	r3, r4
 8001dd0:	f000 fe88 	bl	8002ae4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001dd4:	e061      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f000 fd20 	bl	8002822 <I2C_WaitOnTXISFlagUntilTimeout>
 8001de2:	1e03      	subs	r3, r0, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e081      	b.n	8001eee <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d03a      	beq.n	8001e9a <HAL_I2C_Master_Transmit+0x1aa>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d136      	bne.n	8001e9a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	0013      	movs	r3, r2
 8001e36:	2200      	movs	r2, #0
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	f000 fcb3 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8001e3e:	1e03      	subs	r3, r0, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e053      	b.n	8001eee <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2bff      	cmp	r3, #255	; 0xff
 8001e4e:	d911      	bls.n	8001e74 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	22ff      	movs	r2, #255	; 0xff
 8001e54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	045c      	lsls	r4, r3, #17
 8001e60:	230a      	movs	r3, #10
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	8819      	ldrh	r1, [r3, #0]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	0023      	movs	r3, r4
 8001e6e:	f000 fe39 	bl	8002ae4 <I2C_TransferConfig>
 8001e72:	e012      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	049c      	lsls	r4, r3, #18
 8001e88:	230a      	movs	r3, #10
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	8819      	ldrh	r1, [r3, #0]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	2300      	movs	r3, #0
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	0023      	movs	r3, r4
 8001e96:	f000 fe25 	bl	8002ae4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d198      	bne.n	8001dd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f000 fcf8 	bl	80028a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eb0:	1e03      	subs	r3, r0, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e01a      	b.n	8001eee <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	490c      	ldr	r1, [pc, #48]	; (8001efc <HAL_I2C_Master_Transmit+0x20c>)
 8001ecc:	400a      	ands	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2241      	movs	r2, #65	; 0x41
 8001ed4:	2120      	movs	r1, #32
 8001ed6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2242      	movs	r2, #66	; 0x42
 8001edc:	2100      	movs	r1, #0
 8001ede:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2240      	movs	r2, #64	; 0x40
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e000      	b.n	8001eee <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001eec:	2302      	movs	r3, #2
  }
}
 8001eee:	0018      	movs	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b007      	add	sp, #28
 8001ef4:	bd90      	pop	{r4, r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	80002000 	.word	0x80002000
 8001efc:	fe00e800 	.word	0xfe00e800

08001f00 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	0008      	movs	r0, r1
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	230a      	movs	r3, #10
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	1c02      	adds	r2, r0, #0
 8001f14:	801a      	strh	r2, [r3, #0]
 8001f16:	2308      	movs	r3, #8
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	1c0a      	adds	r2, r1, #0
 8001f1c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2241      	movs	r2, #65	; 0x41
 8001f22:	5c9b      	ldrb	r3, [r3, r2]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d000      	beq.n	8001f2c <HAL_I2C_Master_Receive+0x2c>
 8001f2a:	e0e8      	b.n	80020fe <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2240      	movs	r2, #64	; 0x40
 8001f30:	5c9b      	ldrb	r3, [r3, r2]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_I2C_Master_Receive+0x3a>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e0e2      	b.n	8002100 <HAL_I2C_Master_Receive+0x200>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2240      	movs	r2, #64	; 0x40
 8001f3e:	2101      	movs	r1, #1
 8001f40:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f42:	f7ff fc11 	bl	8001768 <HAL_GetTick>
 8001f46:	0003      	movs	r3, r0
 8001f48:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	0219      	lsls	r1, r3, #8
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2319      	movs	r3, #25
 8001f56:	2201      	movs	r2, #1
 8001f58:	f000 fc24 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8001f5c:	1e03      	subs	r3, r0, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0cd      	b.n	8002100 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2241      	movs	r2, #65	; 0x41
 8001f68:	2122      	movs	r1, #34	; 0x22
 8001f6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2242      	movs	r2, #66	; 0x42
 8001f70:	2110      	movs	r1, #16
 8001f72:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2208      	movs	r2, #8
 8001f84:	18ba      	adds	r2, r7, r2
 8001f86:	8812      	ldrh	r2, [r2, #0]
 8001f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2bff      	cmp	r3, #255	; 0xff
 8001f98:	d911      	bls.n	8001fbe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	22ff      	movs	r2, #255	; 0xff
 8001f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	045c      	lsls	r4, r3, #17
 8001faa:	230a      	movs	r3, #10
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	8819      	ldrh	r1, [r3, #0]
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	4b55      	ldr	r3, [pc, #340]	; (8002108 <HAL_I2C_Master_Receive+0x208>)
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	0023      	movs	r3, r4
 8001fb8:	f000 fd94 	bl	8002ae4 <I2C_TransferConfig>
 8001fbc:	e076      	b.n	80020ac <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	049c      	lsls	r4, r3, #18
 8001fd2:	230a      	movs	r3, #10
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	8819      	ldrh	r1, [r3, #0]
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	4b4b      	ldr	r3, [pc, #300]	; (8002108 <HAL_I2C_Master_Receive+0x208>)
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	0023      	movs	r3, r4
 8001fe0:	f000 fd80 	bl	8002ae4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001fe4:	e062      	b.n	80020ac <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	0018      	movs	r0, r3
 8001fee:	f000 fc93 	bl	8002918 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ff2:	1e03      	subs	r3, r0, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e082      	b.n	8002100 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d03a      	beq.n	80020ac <HAL_I2C_Master_Receive+0x1ac>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203a:	2b00      	cmp	r3, #0
 800203c:	d136      	bne.n	80020ac <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800203e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	0013      	movs	r3, r2
 8002048:	2200      	movs	r2, #0
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	f000 fbaa 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8002050:	1e03      	subs	r3, r0, #0
 8002052:	d001      	beq.n	8002058 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e053      	b.n	8002100 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205c:	b29b      	uxth	r3, r3
 800205e:	2bff      	cmp	r3, #255	; 0xff
 8002060:	d911      	bls.n	8002086 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	22ff      	movs	r2, #255	; 0xff
 8002066:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206c:	b2da      	uxtb	r2, r3
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	045c      	lsls	r4, r3, #17
 8002072:	230a      	movs	r3, #10
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	8819      	ldrh	r1, [r3, #0]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	2300      	movs	r3, #0
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	0023      	movs	r3, r4
 8002080:	f000 fd30 	bl	8002ae4 <I2C_TransferConfig>
 8002084:	e012      	b.n	80020ac <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	b2da      	uxtb	r2, r3
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	049c      	lsls	r4, r3, #18
 800209a:	230a      	movs	r3, #10
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	8819      	ldrh	r1, [r3, #0]
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	2300      	movs	r3, #0
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	0023      	movs	r3, r4
 80020a8:	f000 fd1c 	bl	8002ae4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d197      	bne.n	8001fe6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 fbef 	bl	80028a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020c2:	1e03      	subs	r3, r0, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e01a      	b.n	8002100 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2220      	movs	r2, #32
 80020d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	490b      	ldr	r1, [pc, #44]	; (800210c <HAL_I2C_Master_Receive+0x20c>)
 80020de:	400a      	ands	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2241      	movs	r2, #65	; 0x41
 80020e6:	2120      	movs	r1, #32
 80020e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2242      	movs	r2, #66	; 0x42
 80020ee:	2100      	movs	r1, #0
 80020f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2240      	movs	r2, #64	; 0x40
 80020f6:	2100      	movs	r1, #0
 80020f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
  }
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b007      	add	sp, #28
 8002106:	bd90      	pop	{r4, r7, pc}
 8002108:	80002400 	.word	0x80002400
 800210c:	fe00e800 	.word	0xfe00e800

08002110 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	000c      	movs	r4, r1
 800211a:	0010      	movs	r0, r2
 800211c:	0019      	movs	r1, r3
 800211e:	230a      	movs	r3, #10
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	1c22      	adds	r2, r4, #0
 8002124:	801a      	strh	r2, [r3, #0]
 8002126:	2308      	movs	r3, #8
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	1c02      	adds	r2, r0, #0
 800212c:	801a      	strh	r2, [r3, #0]
 800212e:	1dbb      	adds	r3, r7, #6
 8002130:	1c0a      	adds	r2, r1, #0
 8002132:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2241      	movs	r2, #65	; 0x41
 8002138:	5c9b      	ldrb	r3, [r3, r2]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b20      	cmp	r3, #32
 800213e:	d000      	beq.n	8002142 <HAL_I2C_Mem_Write+0x32>
 8002140:	e10c      	b.n	800235c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <HAL_I2C_Mem_Write+0x42>
 8002148:	232c      	movs	r3, #44	; 0x2c
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0ff      	b.n	800235e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2240      	movs	r2, #64	; 0x40
 8002162:	5c9b      	ldrb	r3, [r3, r2]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_I2C_Mem_Write+0x5c>
 8002168:	2302      	movs	r3, #2
 800216a:	e0f8      	b.n	800235e <HAL_I2C_Mem_Write+0x24e>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	2101      	movs	r1, #1
 8002172:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002174:	f7ff faf8 	bl	8001768 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	0219      	lsls	r1, r3, #8
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2319      	movs	r3, #25
 8002188:	2201      	movs	r2, #1
 800218a:	f000 fb0b 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 800218e:	1e03      	subs	r3, r0, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e0e3      	b.n	800235e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2241      	movs	r2, #65	; 0x41
 800219a:	2121      	movs	r1, #33	; 0x21
 800219c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2242      	movs	r2, #66	; 0x42
 80021a2:	2140      	movs	r1, #64	; 0x40
 80021a4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	222c      	movs	r2, #44	; 0x2c
 80021b6:	18ba      	adds	r2, r7, r2
 80021b8:	8812      	ldrh	r2, [r2, #0]
 80021ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021c2:	1dbb      	adds	r3, r7, #6
 80021c4:	881c      	ldrh	r4, [r3, #0]
 80021c6:	2308      	movs	r3, #8
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	881a      	ldrh	r2, [r3, #0]
 80021cc:	230a      	movs	r3, #10
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	8819      	ldrh	r1, [r3, #0]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	0023      	movs	r3, r4
 80021de:	f000 f9f9 	bl	80025d4 <I2C_RequestMemoryWrite>
 80021e2:	1e03      	subs	r3, r0, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2240      	movs	r2, #64	; 0x40
 80021ea:	2100      	movs	r1, #0
 80021ec:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0b5      	b.n	800235e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2bff      	cmp	r3, #255	; 0xff
 80021fa:	d911      	bls.n	8002220 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	22ff      	movs	r2, #255	; 0xff
 8002200:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002206:	b2da      	uxtb	r2, r3
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	045c      	lsls	r4, r3, #17
 800220c:	230a      	movs	r3, #10
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	8819      	ldrh	r1, [r3, #0]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	2300      	movs	r3, #0
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	0023      	movs	r3, r4
 800221a:	f000 fc63 	bl	8002ae4 <I2C_TransferConfig>
 800221e:	e012      	b.n	8002246 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	b2da      	uxtb	r2, r3
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	049c      	lsls	r4, r3, #18
 8002234:	230a      	movs	r3, #10
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	8819      	ldrh	r1, [r3, #0]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	2300      	movs	r3, #0
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	0023      	movs	r3, r4
 8002242:	f000 fc4f 	bl	8002ae4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	0018      	movs	r0, r3
 800224e:	f000 fae8 	bl	8002822 <I2C_WaitOnTXISFlagUntilTimeout>
 8002252:	1e03      	subs	r3, r0, #0
 8002254:	d001      	beq.n	800225a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e081      	b.n	800235e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03a      	beq.n	800230a <HAL_I2C_Mem_Write+0x1fa>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	d136      	bne.n	800230a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800229c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	0013      	movs	r3, r2
 80022a6:	2200      	movs	r2, #0
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	f000 fa7b 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 80022ae:	1e03      	subs	r3, r0, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e053      	b.n	800235e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2bff      	cmp	r3, #255	; 0xff
 80022be:	d911      	bls.n	80022e4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	045c      	lsls	r4, r3, #17
 80022d0:	230a      	movs	r3, #10
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	8819      	ldrh	r1, [r3, #0]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	2300      	movs	r3, #0
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	0023      	movs	r3, r4
 80022de:	f000 fc01 	bl	8002ae4 <I2C_TransferConfig>
 80022e2:	e012      	b.n	800230a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	049c      	lsls	r4, r3, #18
 80022f8:	230a      	movs	r3, #10
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	8819      	ldrh	r1, [r3, #0]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	2300      	movs	r3, #0
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	0023      	movs	r3, r4
 8002306:	f000 fbed 	bl	8002ae4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d198      	bne.n	8002246 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	0018      	movs	r0, r3
 800231c:	f000 fac0 	bl	80028a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002320:	1e03      	subs	r3, r0, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e01a      	b.n	800235e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2220      	movs	r2, #32
 800232e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	490b      	ldr	r1, [pc, #44]	; (8002368 <HAL_I2C_Mem_Write+0x258>)
 800233c:	400a      	ands	r2, r1
 800233e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2241      	movs	r2, #65	; 0x41
 8002344:	2120      	movs	r1, #32
 8002346:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2242      	movs	r2, #66	; 0x42
 800234c:	2100      	movs	r1, #0
 800234e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2240      	movs	r2, #64	; 0x40
 8002354:	2100      	movs	r1, #0
 8002356:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b007      	add	sp, #28
 8002364:	bd90      	pop	{r4, r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	fe00e800 	.word	0xfe00e800

0800236c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	000c      	movs	r4, r1
 8002376:	0010      	movs	r0, r2
 8002378:	0019      	movs	r1, r3
 800237a:	230a      	movs	r3, #10
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	1c22      	adds	r2, r4, #0
 8002380:	801a      	strh	r2, [r3, #0]
 8002382:	2308      	movs	r3, #8
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	1c02      	adds	r2, r0, #0
 8002388:	801a      	strh	r2, [r3, #0]
 800238a:	1dbb      	adds	r3, r7, #6
 800238c:	1c0a      	adds	r2, r1, #0
 800238e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2241      	movs	r2, #65	; 0x41
 8002394:	5c9b      	ldrb	r3, [r3, r2]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b20      	cmp	r3, #32
 800239a:	d000      	beq.n	800239e <HAL_I2C_Mem_Read+0x32>
 800239c:	e110      	b.n	80025c0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d004      	beq.n	80023ae <HAL_I2C_Mem_Read+0x42>
 80023a4:	232c      	movs	r3, #44	; 0x2c
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	0092      	lsls	r2, r2, #2
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e103      	b.n	80025c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_I2C_Mem_Read+0x5c>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e0fc      	b.n	80025c2 <HAL_I2C_Mem_Read+0x256>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2240      	movs	r2, #64	; 0x40
 80023cc:	2101      	movs	r1, #1
 80023ce:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023d0:	f7ff f9ca 	bl	8001768 <HAL_GetTick>
 80023d4:	0003      	movs	r3, r0
 80023d6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	0219      	lsls	r1, r3, #8
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2319      	movs	r3, #25
 80023e4:	2201      	movs	r2, #1
 80023e6:	f000 f9dd 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0e7      	b.n	80025c2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2241      	movs	r2, #65	; 0x41
 80023f6:	2122      	movs	r1, #34	; 0x22
 80023f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2242      	movs	r2, #66	; 0x42
 80023fe:	2140      	movs	r1, #64	; 0x40
 8002400:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800240c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	222c      	movs	r2, #44	; 0x2c
 8002412:	18ba      	adds	r2, r7, r2
 8002414:	8812      	ldrh	r2, [r2, #0]
 8002416:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800241e:	1dbb      	adds	r3, r7, #6
 8002420:	881c      	ldrh	r4, [r3, #0]
 8002422:	2308      	movs	r3, #8
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	881a      	ldrh	r2, [r3, #0]
 8002428:	230a      	movs	r3, #10
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	8819      	ldrh	r1, [r3, #0]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	0023      	movs	r3, r4
 800243a:	f000 f92f 	bl	800269c <I2C_RequestMemoryRead>
 800243e:	1e03      	subs	r3, r0, #0
 8002440:	d005      	beq.n	800244e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2240      	movs	r2, #64	; 0x40
 8002446:	2100      	movs	r1, #0
 8002448:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0b9      	b.n	80025c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	2bff      	cmp	r3, #255	; 0xff
 8002456:	d911      	bls.n	800247c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	22ff      	movs	r2, #255	; 0xff
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002462:	b2da      	uxtb	r2, r3
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	045c      	lsls	r4, r3, #17
 8002468:	230a      	movs	r3, #10
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	8819      	ldrh	r1, [r3, #0]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	4b56      	ldr	r3, [pc, #344]	; (80025cc <HAL_I2C_Mem_Read+0x260>)
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	0023      	movs	r3, r4
 8002476:	f000 fb35 	bl	8002ae4 <I2C_TransferConfig>
 800247a:	e012      	b.n	80024a2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	b2da      	uxtb	r2, r3
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	049c      	lsls	r4, r3, #18
 8002490:	230a      	movs	r3, #10
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	8819      	ldrh	r1, [r3, #0]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	4b4c      	ldr	r3, [pc, #304]	; (80025cc <HAL_I2C_Mem_Read+0x260>)
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	0023      	movs	r3, r4
 800249e:	f000 fb21 	bl	8002ae4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80024a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	0013      	movs	r3, r2
 80024ac:	2200      	movs	r2, #0
 80024ae:	2104      	movs	r1, #4
 80024b0:	f000 f978 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 80024b4:	1e03      	subs	r3, r0, #0
 80024b6:	d001      	beq.n	80024bc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e082      	b.n	80025c2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d03a      	beq.n	800256e <HAL_I2C_Mem_Read+0x202>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d136      	bne.n	800256e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	0013      	movs	r3, r2
 800250a:	2200      	movs	r2, #0
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	f000 f949 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8002512:	1e03      	subs	r3, r0, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e053      	b.n	80025c2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	2bff      	cmp	r3, #255	; 0xff
 8002522:	d911      	bls.n	8002548 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	22ff      	movs	r2, #255	; 0xff
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252e:	b2da      	uxtb	r2, r3
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	045c      	lsls	r4, r3, #17
 8002534:	230a      	movs	r3, #10
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	8819      	ldrh	r1, [r3, #0]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	2300      	movs	r3, #0
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	0023      	movs	r3, r4
 8002542:	f000 facf 	bl	8002ae4 <I2C_TransferConfig>
 8002546:	e012      	b.n	800256e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002556:	b2da      	uxtb	r2, r3
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	049c      	lsls	r4, r3, #18
 800255c:	230a      	movs	r3, #10
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	8819      	ldrh	r1, [r3, #0]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	2300      	movs	r3, #0
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	0023      	movs	r3, r4
 800256a:	f000 fabb 	bl	8002ae4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d194      	bne.n	80024a2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	0018      	movs	r0, r3
 8002580:	f000 f98e 	bl	80028a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002584:	1e03      	subs	r3, r0, #0
 8002586:	d001      	beq.n	800258c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e01a      	b.n	80025c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2220      	movs	r2, #32
 8002592:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	490c      	ldr	r1, [pc, #48]	; (80025d0 <HAL_I2C_Mem_Read+0x264>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2241      	movs	r2, #65	; 0x41
 80025a8:	2120      	movs	r1, #32
 80025aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2242      	movs	r2, #66	; 0x42
 80025b0:	2100      	movs	r1, #0
 80025b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2240      	movs	r2, #64	; 0x40
 80025b8:	2100      	movs	r1, #0
 80025ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	e000      	b.n	80025c2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80025c0:	2302      	movs	r3, #2
  }
}
 80025c2:	0018      	movs	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b007      	add	sp, #28
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	80002400 	.word	0x80002400
 80025d0:	fe00e800 	.word	0xfe00e800

080025d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	000c      	movs	r4, r1
 80025de:	0010      	movs	r0, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	250a      	movs	r5, #10
 80025e4:	197b      	adds	r3, r7, r5
 80025e6:	1c22      	adds	r2, r4, #0
 80025e8:	801a      	strh	r2, [r3, #0]
 80025ea:	2308      	movs	r3, #8
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	1c02      	adds	r2, r0, #0
 80025f0:	801a      	strh	r2, [r3, #0]
 80025f2:	1dbb      	adds	r3, r7, #6
 80025f4:	1c0a      	adds	r2, r1, #0
 80025f6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025f8:	1dbb      	adds	r3, r7, #6
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	045c      	lsls	r4, r3, #17
 8002602:	197b      	adds	r3, r7, r5
 8002604:	8819      	ldrh	r1, [r3, #0]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	4b23      	ldr	r3, [pc, #140]	; (8002698 <I2C_RequestMemoryWrite+0xc4>)
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	0023      	movs	r3, r4
 800260e:	f000 fa69 	bl	8002ae4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002614:	6a39      	ldr	r1, [r7, #32]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	0018      	movs	r0, r3
 800261a:	f000 f902 	bl	8002822 <I2C_WaitOnTXISFlagUntilTimeout>
 800261e:	1e03      	subs	r3, r0, #0
 8002620:	d001      	beq.n	8002626 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e033      	b.n	800268e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002626:	1dbb      	adds	r3, r7, #6
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d107      	bne.n	800263e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800262e:	2308      	movs	r3, #8
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
 800263c:	e019      	b.n	8002672 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800263e:	2308      	movs	r3, #8
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	b29b      	uxth	r3, r3
 8002648:	b2da      	uxtb	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	6a39      	ldr	r1, [r7, #32]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	0018      	movs	r0, r3
 8002658:	f000 f8e3 	bl	8002822 <I2C_WaitOnTXISFlagUntilTimeout>
 800265c:	1e03      	subs	r3, r0, #0
 800265e:	d001      	beq.n	8002664 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e014      	b.n	800268e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002664:	2308      	movs	r3, #8
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002672:	6a3a      	ldr	r2, [r7, #32]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	0013      	movs	r3, r2
 800267c:	2200      	movs	r2, #0
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	f000 f890 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8002684:	1e03      	subs	r3, r0, #0
 8002686:	d001      	beq.n	800268c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	0018      	movs	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	b004      	add	sp, #16
 8002694:	bdb0      	pop	{r4, r5, r7, pc}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	80002000 	.word	0x80002000

0800269c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800269c:	b5b0      	push	{r4, r5, r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	000c      	movs	r4, r1
 80026a6:	0010      	movs	r0, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	250a      	movs	r5, #10
 80026ac:	197b      	adds	r3, r7, r5
 80026ae:	1c22      	adds	r2, r4, #0
 80026b0:	801a      	strh	r2, [r3, #0]
 80026b2:	2308      	movs	r3, #8
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	1c02      	adds	r2, r0, #0
 80026b8:	801a      	strh	r2, [r3, #0]
 80026ba:	1dbb      	adds	r3, r7, #6
 80026bc:	1c0a      	adds	r2, r1, #0
 80026be:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80026c0:	1dbb      	adds	r3, r7, #6
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	197b      	adds	r3, r7, r5
 80026c8:	8819      	ldrh	r1, [r3, #0]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	4b23      	ldr	r3, [pc, #140]	; (800275c <I2C_RequestMemoryRead+0xc0>)
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2300      	movs	r3, #0
 80026d2:	f000 fa07 	bl	8002ae4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	6a39      	ldr	r1, [r7, #32]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 f8a0 	bl	8002822 <I2C_WaitOnTXISFlagUntilTimeout>
 80026e2:	1e03      	subs	r3, r0, #0
 80026e4:	d001      	beq.n	80026ea <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e033      	b.n	8002752 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026ea:	1dbb      	adds	r3, r7, #6
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d107      	bne.n	8002702 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026f2:	2308      	movs	r3, #8
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002700:	e019      	b.n	8002736 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002702:	2308      	movs	r3, #8
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	b29b      	uxth	r3, r3
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002716:	6a39      	ldr	r1, [r7, #32]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f881 	bl	8002822 <I2C_WaitOnTXISFlagUntilTimeout>
 8002720:	1e03      	subs	r3, r0, #0
 8002722:	d001      	beq.n	8002728 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e014      	b.n	8002752 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002728:	2308      	movs	r3, #8
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002736:	6a3a      	ldr	r2, [r7, #32]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	0013      	movs	r3, r2
 8002740:	2200      	movs	r2, #0
 8002742:	2140      	movs	r1, #64	; 0x40
 8002744:	f000 f82e 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b004      	add	sp, #16
 8002758:	bdb0      	pop	{r4, r5, r7, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	80002000 	.word	0x80002000

08002760 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2202      	movs	r2, #2
 8002770:	4013      	ands	r3, r2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d103      	bne.n	800277e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2200      	movs	r2, #0
 800277c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2201      	movs	r2, #1
 8002786:	4013      	ands	r3, r2
 8002788:	2b01      	cmp	r3, #1
 800278a:	d007      	beq.n	800279c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2101      	movs	r1, #1
 8002798:	430a      	orrs	r2, r1
 800279a:	619a      	str	r2, [r3, #24]
  }
}
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	b002      	add	sp, #8
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b4:	e021      	b.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	3301      	adds	r3, #1
 80027ba:	d01e      	beq.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027bc:	f7fe ffd4 	bl	8001768 <HAL_GetTick>
 80027c0:	0002      	movs	r2, r0
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d302      	bcc.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d113      	bne.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	2220      	movs	r2, #32
 80027d8:	431a      	orrs	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2241      	movs	r2, #65	; 0x41
 80027e2:	2120      	movs	r1, #32
 80027e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2242      	movs	r2, #66	; 0x42
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2240      	movs	r2, #64	; 0x40
 80027f2:	2100      	movs	r1, #0
 80027f4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00f      	b.n	800281a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	4013      	ands	r3, r2
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	425a      	negs	r2, r3
 800280a:	4153      	adcs	r3, r2
 800280c:	b2db      	uxtb	r3, r3
 800280e:	001a      	movs	r2, r3
 8002810:	1dfb      	adds	r3, r7, #7
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d0ce      	beq.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	0018      	movs	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	b004      	add	sp, #16
 8002820:	bd80      	pop	{r7, pc}

08002822 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800282e:	e02b      	b.n	8002888 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	0018      	movs	r0, r3
 8002838:	f000 f8da 	bl	80029f0 <I2C_IsAcknowledgeFailed>
 800283c:	1e03      	subs	r3, r0, #0
 800283e:	d001      	beq.n	8002844 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e029      	b.n	8002898 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	3301      	adds	r3, #1
 8002848:	d01e      	beq.n	8002888 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284a:	f7fe ff8d 	bl	8001768 <HAL_GetTick>
 800284e:	0002      	movs	r2, r0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d113      	bne.n	8002888 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	2220      	movs	r2, #32
 8002866:	431a      	orrs	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2241      	movs	r2, #65	; 0x41
 8002870:	2120      	movs	r1, #32
 8002872:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2242      	movs	r2, #66	; 0x42
 8002878:	2100      	movs	r1, #0
 800287a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2240      	movs	r2, #64	; 0x40
 8002880:	2100      	movs	r1, #0
 8002882:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e007      	b.n	8002898 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2202      	movs	r2, #2
 8002890:	4013      	ands	r3, r2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d1cc      	bne.n	8002830 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	b004      	add	sp, #16
 800289e:	bd80      	pop	{r7, pc}

080028a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ac:	e028      	b.n	8002900 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f000 f89b 	bl	80029f0 <I2C_IsAcknowledgeFailed>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d001      	beq.n	80028c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e026      	b.n	8002910 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c2:	f7fe ff51 	bl	8001768 <HAL_GetTick>
 80028c6:	0002      	movs	r2, r0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d302      	bcc.n	80028d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d113      	bne.n	8002900 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	2220      	movs	r2, #32
 80028de:	431a      	orrs	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2241      	movs	r2, #65	; 0x41
 80028e8:	2120      	movs	r1, #32
 80028ea:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2242      	movs	r2, #66	; 0x42
 80028f0:	2100      	movs	r1, #0
 80028f2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2240      	movs	r2, #64	; 0x40
 80028f8:	2100      	movs	r1, #0
 80028fa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e007      	b.n	8002910 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2220      	movs	r2, #32
 8002908:	4013      	ands	r3, r2
 800290a:	2b20      	cmp	r3, #32
 800290c:	d1cf      	bne.n	80028ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	0018      	movs	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	b004      	add	sp, #16
 8002916:	bd80      	pop	{r7, pc}

08002918 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002924:	e055      	b.n	80029d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	0018      	movs	r0, r3
 800292e:	f000 f85f 	bl	80029f0 <I2C_IsAcknowledgeFailed>
 8002932:	1e03      	subs	r3, r0, #0
 8002934:	d001      	beq.n	800293a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e053      	b.n	80029e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	2220      	movs	r2, #32
 8002942:	4013      	ands	r3, r2
 8002944:	2b20      	cmp	r3, #32
 8002946:	d129      	bne.n	800299c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2204      	movs	r2, #4
 8002950:	4013      	ands	r3, r2
 8002952:	2b04      	cmp	r3, #4
 8002954:	d105      	bne.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e03f      	b.n	80029e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2220      	movs	r2, #32
 8002968:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	491d      	ldr	r1, [pc, #116]	; (80029ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002976:	400a      	ands	r2, r1
 8002978:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2241      	movs	r2, #65	; 0x41
 8002984:	2120      	movs	r1, #32
 8002986:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2242      	movs	r2, #66	; 0x42
 800298c:	2100      	movs	r1, #0
 800298e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2240      	movs	r2, #64	; 0x40
 8002994:	2100      	movs	r1, #0
 8002996:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e022      	b.n	80029e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299c:	f7fe fee4 	bl	8001768 <HAL_GetTick>
 80029a0:	0002      	movs	r2, r0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d302      	bcc.n	80029b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10f      	bne.n	80029d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	2220      	movs	r2, #32
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2241      	movs	r2, #65	; 0x41
 80029c2:	2120      	movs	r1, #32
 80029c4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2240      	movs	r2, #64	; 0x40
 80029ca:	2100      	movs	r1, #0
 80029cc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e007      	b.n	80029e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2204      	movs	r2, #4
 80029da:	4013      	ands	r3, r2
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d1a2      	bne.n	8002926 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	fe00e800 	.word	0xfe00e800

080029f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2210      	movs	r2, #16
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d164      	bne.n	8002ad4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	049b      	lsls	r3, r3, #18
 8002a14:	401a      	ands	r2, r3
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	049b      	lsls	r3, r3, #18
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d02b      	beq.n	8002a76 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	01c9      	lsls	r1, r1, #7
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a30:	e021      	b.n	8002a76 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	3301      	adds	r3, #1
 8002a36:	d01e      	beq.n	8002a76 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a38:	f7fe fe96 	bl	8001768 <HAL_GetTick>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d302      	bcc.n	8002a4e <I2C_IsAcknowledgeFailed+0x5e>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d113      	bne.n	8002a76 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	2220      	movs	r2, #32
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2241      	movs	r2, #65	; 0x41
 8002a5e:	2120      	movs	r1, #32
 8002a60:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2242      	movs	r2, #66	; 0x42
 8002a66:	2100      	movs	r1, #0
 8002a68:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2240      	movs	r2, #64	; 0x40
 8002a6e:	2100      	movs	r1, #0
 8002a70:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e02f      	b.n	8002ad6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d1d6      	bne.n	8002a32 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2210      	movs	r2, #16
 8002a8a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2220      	movs	r2, #32
 8002a92:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7ff fe62 	bl	8002760 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <I2C_IsAcknowledgeFailed+0xf0>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2241      	movs	r2, #65	; 0x41
 8002abc:	2120      	movs	r1, #32
 8002abe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2242      	movs	r2, #66	; 0x42
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2240      	movs	r2, #64	; 0x40
 8002acc:	2100      	movs	r1, #0
 8002ace:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b004      	add	sp, #16
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	fe00e800 	.word	0xfe00e800

08002ae4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	0008      	movs	r0, r1
 8002aee:	0011      	movs	r1, r2
 8002af0:	607b      	str	r3, [r7, #4]
 8002af2:	240a      	movs	r4, #10
 8002af4:	193b      	adds	r3, r7, r4
 8002af6:	1c02      	adds	r2, r0, #0
 8002af8:	801a      	strh	r2, [r3, #0]
 8002afa:	2009      	movs	r0, #9
 8002afc:	183b      	adds	r3, r7, r0
 8002afe:	1c0a      	adds	r2, r1, #0
 8002b00:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	6a3a      	ldr	r2, [r7, #32]
 8002b0a:	0d51      	lsrs	r1, r2, #21
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	00d2      	lsls	r2, r2, #3
 8002b10:	400a      	ands	r2, r1
 8002b12:	490e      	ldr	r1, [pc, #56]	; (8002b4c <I2C_TransferConfig+0x68>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	43d2      	mvns	r2, r2
 8002b18:	401a      	ands	r2, r3
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	193b      	adds	r3, r7, r4
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	059b      	lsls	r3, r3, #22
 8002b22:	0d9a      	lsrs	r2, r3, #22
 8002b24:	183b      	adds	r3, r7, r0
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	0418      	lsls	r0, r3, #16
 8002b2a:	23ff      	movs	r3, #255	; 0xff
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	4003      	ands	r3, r0
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b005      	add	sp, #20
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	03ff63ff 	.word	0x03ff63ff

08002b50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2241      	movs	r2, #65	; 0x41
 8002b5e:	5c9b      	ldrb	r3, [r3, r2]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d138      	bne.n	8002bd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2240      	movs	r2, #64	; 0x40
 8002b6a:	5c9b      	ldrb	r3, [r3, r2]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e032      	b.n	8002bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2240      	movs	r2, #64	; 0x40
 8002b78:	2101      	movs	r1, #1
 8002b7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2241      	movs	r2, #65	; 0x41
 8002b80:	2124      	movs	r1, #36	; 0x24
 8002b82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2101      	movs	r1, #1
 8002b90:	438a      	bics	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4911      	ldr	r1, [pc, #68]	; (8002be4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6819      	ldr	r1, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2241      	movs	r2, #65	; 0x41
 8002bc8:	2120      	movs	r1, #32
 8002bca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
  }
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b002      	add	sp, #8
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	ffffefff 	.word	0xffffefff

08002be8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2241      	movs	r2, #65	; 0x41
 8002bf6:	5c9b      	ldrb	r3, [r3, r2]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d139      	bne.n	8002c72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2240      	movs	r2, #64	; 0x40
 8002c02:	5c9b      	ldrb	r3, [r3, r2]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e033      	b.n	8002c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2240      	movs	r2, #64	; 0x40
 8002c10:	2101      	movs	r1, #1
 8002c12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2241      	movs	r2, #65	; 0x41
 8002c18:	2124      	movs	r1, #36	; 0x24
 8002c1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	438a      	bics	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2241      	movs	r2, #65	; 0x41
 8002c62:	2120      	movs	r1, #32
 8002c64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2240      	movs	r2, #64	; 0x40
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
  }
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	fffff0ff 	.word	0xfffff0ff

08002c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e301      	b.n	8003296 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2201      	movs	r2, #1
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d100      	bne.n	8002c9e <HAL_RCC_OscConfig+0x1e>
 8002c9c:	e08d      	b.n	8002dba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c9e:	4bc3      	ldr	r3, [pc, #780]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002caa:	4bc0      	ldr	r3, [pc, #768]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	220c      	movs	r2, #12
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d116      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x64>
 8002cb6:	4bbd      	ldr	r3, [pc, #756]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	025b      	lsls	r3, r3, #9
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	025b      	lsls	r3, r3, #9
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	4bb8      	ldr	r3, [pc, #736]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	029b      	lsls	r3, r3, #10
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d100      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x56>
 8002cd4:	e070      	b.n	8002db8 <HAL_RCC_OscConfig+0x138>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d000      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x60>
 8002cde:	e06b      	b.n	8002db8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e2d8      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_OscConfig+0x7c>
 8002cec:	4baf      	ldr	r3, [pc, #700]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4bae      	ldr	r3, [pc, #696]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	0249      	lsls	r1, r1, #9
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e02f      	b.n	8002d5c <HAL_RCC_OscConfig+0xdc>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10c      	bne.n	8002d1e <HAL_RCC_OscConfig+0x9e>
 8002d04:	4ba9      	ldr	r3, [pc, #676]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4ba8      	ldr	r3, [pc, #672]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d0a:	49a9      	ldr	r1, [pc, #676]	; (8002fb0 <HAL_RCC_OscConfig+0x330>)
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	4ba6      	ldr	r3, [pc, #664]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4ba5      	ldr	r3, [pc, #660]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d16:	49a7      	ldr	r1, [pc, #668]	; (8002fb4 <HAL_RCC_OscConfig+0x334>)
 8002d18:	400a      	ands	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e01e      	b.n	8002d5c <HAL_RCC_OscConfig+0xdc>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d10e      	bne.n	8002d44 <HAL_RCC_OscConfig+0xc4>
 8002d26:	4ba1      	ldr	r3, [pc, #644]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4ba0      	ldr	r3, [pc, #640]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d2c:	2180      	movs	r1, #128	; 0x80
 8002d2e:	02c9      	lsls	r1, r1, #11
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	4b9d      	ldr	r3, [pc, #628]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b9c      	ldr	r3, [pc, #624]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	0249      	lsls	r1, r1, #9
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0xdc>
 8002d44:	4b99      	ldr	r3, [pc, #612]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b98      	ldr	r3, [pc, #608]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d4a:	4999      	ldr	r1, [pc, #612]	; (8002fb0 <HAL_RCC_OscConfig+0x330>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	4b96      	ldr	r3, [pc, #600]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b95      	ldr	r3, [pc, #596]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d56:	4997      	ldr	r1, [pc, #604]	; (8002fb4 <HAL_RCC_OscConfig+0x334>)
 8002d58:	400a      	ands	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d014      	beq.n	8002d8e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fd00 	bl	8001768 <HAL_GetTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d6e:	f7fe fcfb 	bl	8001768 <HAL_GetTick>
 8002d72:	0002      	movs	r2, r0
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b64      	cmp	r3, #100	; 0x64
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e28a      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d80:	4b8a      	ldr	r3, [pc, #552]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	029b      	lsls	r3, r3, #10
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0xee>
 8002d8c:	e015      	b.n	8002dba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fceb 	bl	8001768 <HAL_GetTick>
 8002d92:	0003      	movs	r3, r0
 8002d94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d98:	f7fe fce6 	bl	8001768 <HAL_GetTick>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e275      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	4b80      	ldr	r3, [pc, #512]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	029b      	lsls	r3, r3, #10
 8002db2:	4013      	ands	r3, r2
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x118>
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d100      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x146>
 8002dc4:	e069      	b.n	8002e9a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002dc6:	4b79      	ldr	r3, [pc, #484]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	220c      	movs	r2, #12
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d00b      	beq.n	8002de8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002dd0:	4b76      	ldr	r3, [pc, #472]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	220c      	movs	r2, #12
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d11c      	bne.n	8002e16 <HAL_RCC_OscConfig+0x196>
 8002ddc:	4b73      	ldr	r3, [pc, #460]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	025b      	lsls	r3, r3, #9
 8002de4:	4013      	ands	r3, r2
 8002de6:	d116      	bne.n	8002e16 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de8:	4b70      	ldr	r3, [pc, #448]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2202      	movs	r2, #2
 8002dee:	4013      	ands	r3, r2
 8002df0:	d005      	beq.n	8002dfe <HAL_RCC_OscConfig+0x17e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e24b      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b6b      	ldr	r3, [pc, #428]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	22f8      	movs	r2, #248	; 0xf8
 8002e04:	4393      	bics	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	00da      	lsls	r2, r3, #3
 8002e0e:	4b67      	ldr	r3, [pc, #412]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e14:	e041      	b.n	8002e9a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d024      	beq.n	8002e68 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1e:	4b63      	ldr	r3, [pc, #396]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4b62      	ldr	r3, [pc, #392]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e24:	2101      	movs	r1, #1
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fc9d 	bl	8001768 <HAL_GetTick>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e34:	f7fe fc98 	bl	8001768 <HAL_GetTick>
 8002e38:	0002      	movs	r2, r0
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e227      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e46:	4b59      	ldr	r3, [pc, #356]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d0f1      	beq.n	8002e34 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e50:	4b56      	ldr	r3, [pc, #344]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	22f8      	movs	r2, #248	; 0xf8
 8002e56:	4393      	bics	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00da      	lsls	r2, r3, #3
 8002e60:	4b52      	ldr	r3, [pc, #328]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e62:	430a      	orrs	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e018      	b.n	8002e9a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e68:	4b50      	ldr	r3, [pc, #320]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b4f      	ldr	r3, [pc, #316]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e6e:	2101      	movs	r1, #1
 8002e70:	438a      	bics	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe fc78 	bl	8001768 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7fe fc73 	bl	8001768 <HAL_GetTick>
 8002e82:	0002      	movs	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e202      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e90:	4b46      	ldr	r3, [pc, #280]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2202      	movs	r2, #2
 8002e96:	4013      	ands	r3, r2
 8002e98:	d1f1      	bne.n	8002e7e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d036      	beq.n	8002f12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d019      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eac:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb0:	4b3e      	ldr	r3, [pc, #248]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb8:	f7fe fc56 	bl	8001768 <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec2:	f7fe fc51 	bl	8001768 <HAL_GetTick>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e1e0      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed4:	4b35      	ldr	r3, [pc, #212]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2202      	movs	r2, #2
 8002eda:	4013      	ands	r3, r2
 8002edc:	d0f1      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x242>
 8002ede:	e018      	b.n	8002f12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee0:	4b32      	ldr	r3, [pc, #200]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee4:	4b31      	ldr	r3, [pc, #196]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	438a      	bics	r2, r1
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eec:	f7fe fc3c 	bl	8001768 <HAL_GetTick>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef6:	f7fe fc37 	bl	8001768 <HAL_GetTick>
 8002efa:	0002      	movs	r2, r0
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1c6      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d1f1      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2204      	movs	r2, #4
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <HAL_RCC_OscConfig+0x29e>
 8002f1c:	e0b4      	b.n	8003088 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	201f      	movs	r0, #31
 8002f20:	183b      	adds	r3, r7, r0
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f26:	4b21      	ldr	r3, [pc, #132]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	055b      	lsls	r3, r3, #21
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d110      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002f38:	2180      	movs	r1, #128	; 0x80
 8002f3a:	0549      	lsls	r1, r1, #21
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	61da      	str	r2, [r3, #28]
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	055b      	lsls	r3, r3, #21
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f4e:	183b      	adds	r3, r7, r0
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d11a      	bne.n	8002f96 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f60:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	0049      	lsls	r1, r1, #1
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe fbfb 	bl	8001768 <HAL_GetTick>
 8002f72:	0003      	movs	r3, r0
 8002f74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f78:	f7fe fbf6 	bl	8001768 <HAL_GetTick>
 8002f7c:	0002      	movs	r2, r0
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e185      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4013      	ands	r3, r2
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10e      	bne.n	8002fbc <HAL_RCC_OscConfig+0x33c>
 8002f9e:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	4b02      	ldr	r3, [pc, #8]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	621a      	str	r2, [r3, #32]
 8002faa:	e035      	b.n	8003018 <HAL_RCC_OscConfig+0x398>
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	fffeffff 	.word	0xfffeffff
 8002fb4:	fffbffff 	.word	0xfffbffff
 8002fb8:	40007000 	.word	0x40007000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10c      	bne.n	8002fde <HAL_RCC_OscConfig+0x35e>
 8002fc4:	4bb6      	ldr	r3, [pc, #728]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002fc6:	6a1a      	ldr	r2, [r3, #32]
 8002fc8:	4bb5      	ldr	r3, [pc, #724]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002fca:	2101      	movs	r1, #1
 8002fcc:	438a      	bics	r2, r1
 8002fce:	621a      	str	r2, [r3, #32]
 8002fd0:	4bb3      	ldr	r3, [pc, #716]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002fd2:	6a1a      	ldr	r2, [r3, #32]
 8002fd4:	4bb2      	ldr	r3, [pc, #712]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	438a      	bics	r2, r1
 8002fda:	621a      	str	r2, [r3, #32]
 8002fdc:	e01c      	b.n	8003018 <HAL_RCC_OscConfig+0x398>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x380>
 8002fe6:	4bae      	ldr	r3, [pc, #696]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	4bad      	ldr	r3, [pc, #692]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002fec:	2104      	movs	r1, #4
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	621a      	str	r2, [r3, #32]
 8002ff2:	4bab      	ldr	r3, [pc, #684]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002ff4:	6a1a      	ldr	r2, [r3, #32]
 8002ff6:	4baa      	ldr	r3, [pc, #680]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	621a      	str	r2, [r3, #32]
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0x398>
 8003000:	4ba7      	ldr	r3, [pc, #668]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	4ba6      	ldr	r3, [pc, #664]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003006:	2101      	movs	r1, #1
 8003008:	438a      	bics	r2, r1
 800300a:	621a      	str	r2, [r3, #32]
 800300c:	4ba4      	ldr	r3, [pc, #656]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800300e:	6a1a      	ldr	r2, [r3, #32]
 8003010:	4ba3      	ldr	r3, [pc, #652]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003012:	2104      	movs	r1, #4
 8003014:	438a      	bics	r2, r1
 8003016:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d014      	beq.n	800304a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003020:	f7fe fba2 	bl	8001768 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003028:	e009      	b.n	800303e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fb9d 	bl	8001768 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	4a9b      	ldr	r2, [pc, #620]	; (80032a4 <HAL_RCC_OscConfig+0x624>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e12b      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303e:	4b98      	ldr	r3, [pc, #608]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	2202      	movs	r2, #2
 8003044:	4013      	ands	r3, r2
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x3aa>
 8003048:	e013      	b.n	8003072 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fe fb8d 	bl	8001768 <HAL_GetTick>
 800304e:	0003      	movs	r3, r0
 8003050:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003052:	e009      	b.n	8003068 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fe fb88 	bl	8001768 <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	4a91      	ldr	r2, [pc, #580]	; (80032a4 <HAL_RCC_OscConfig+0x624>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e116      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003068:	4b8d      	ldr	r3, [pc, #564]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	2202      	movs	r2, #2
 800306e:	4013      	ands	r3, r2
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003072:	231f      	movs	r3, #31
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307c:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	4b87      	ldr	r3, [pc, #540]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003082:	4989      	ldr	r1, [pc, #548]	; (80032a8 <HAL_RCC_OscConfig+0x628>)
 8003084:	400a      	ands	r2, r1
 8003086:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2210      	movs	r2, #16
 800308e:	4013      	ands	r3, r2
 8003090:	d063      	beq.n	800315a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d12a      	bne.n	80030f0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800309a:	4b81      	ldr	r3, [pc, #516]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800309c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800309e:	4b80      	ldr	r3, [pc, #512]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030a0:	2104      	movs	r1, #4
 80030a2:	430a      	orrs	r2, r1
 80030a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80030a6:	4b7e      	ldr	r3, [pc, #504]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030aa:	4b7d      	ldr	r3, [pc, #500]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030ac:	2101      	movs	r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b2:	f7fe fb59 	bl	8001768 <HAL_GetTick>
 80030b6:	0003      	movs	r3, r0
 80030b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80030bc:	f7fe fb54 	bl	8001768 <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0e3      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80030ce:	4b74      	ldr	r3, [pc, #464]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d2:	2202      	movs	r2, #2
 80030d4:	4013      	ands	r3, r2
 80030d6:	d0f1      	beq.n	80030bc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80030d8:	4b71      	ldr	r3, [pc, #452]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030dc:	22f8      	movs	r2, #248	; 0xf8
 80030de:	4393      	bics	r3, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	00da      	lsls	r2, r3, #3
 80030e8:	4b6d      	ldr	r3, [pc, #436]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030ea:	430a      	orrs	r2, r1
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34
 80030ee:	e034      	b.n	800315a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	3305      	adds	r3, #5
 80030f6:	d111      	bne.n	800311c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80030f8:	4b69      	ldr	r3, [pc, #420]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030fc:	4b68      	ldr	r3, [pc, #416]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030fe:	2104      	movs	r1, #4
 8003100:	438a      	bics	r2, r1
 8003102:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003104:	4b66      	ldr	r3, [pc, #408]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003108:	22f8      	movs	r2, #248	; 0xf8
 800310a:	4393      	bics	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	00da      	lsls	r2, r3, #3
 8003114:	4b62      	ldr	r3, [pc, #392]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003116:	430a      	orrs	r2, r1
 8003118:	635a      	str	r2, [r3, #52]	; 0x34
 800311a:	e01e      	b.n	800315a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800311c:	4b60      	ldr	r3, [pc, #384]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800311e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003120:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003122:	2104      	movs	r1, #4
 8003124:	430a      	orrs	r2, r1
 8003126:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003128:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800312a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312c:	4b5c      	ldr	r3, [pc, #368]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800312e:	2101      	movs	r1, #1
 8003130:	438a      	bics	r2, r1
 8003132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003134:	f7fe fb18 	bl	8001768 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800313e:	f7fe fb13 	bl	8001768 <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e0a2      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003150:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	2202      	movs	r2, #2
 8003156:	4013      	ands	r3, r2
 8003158:	d1f1      	bne.n	800313e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d100      	bne.n	8003164 <HAL_RCC_OscConfig+0x4e4>
 8003162:	e097      	b.n	8003294 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003164:	4b4e      	ldr	r3, [pc, #312]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	220c      	movs	r2, #12
 800316a:	4013      	ands	r3, r2
 800316c:	2b08      	cmp	r3, #8
 800316e:	d100      	bne.n	8003172 <HAL_RCC_OscConfig+0x4f2>
 8003170:	e06b      	b.n	800324a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d14c      	bne.n	8003214 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4b48      	ldr	r3, [pc, #288]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003180:	494a      	ldr	r1, [pc, #296]	; (80032ac <HAL_RCC_OscConfig+0x62c>)
 8003182:	400a      	ands	r2, r1
 8003184:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003186:	f7fe faef 	bl	8001768 <HAL_GetTick>
 800318a:	0003      	movs	r3, r0
 800318c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe faea 	bl	8001768 <HAL_GetTick>
 8003194:	0002      	movs	r2, r0
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e079      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a2:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	049b      	lsls	r3, r3, #18
 80031aa:	4013      	ands	r3, r2
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ae:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	220f      	movs	r2, #15
 80031b4:	4393      	bics	r3, r2
 80031b6:	0019      	movs	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031bc:	4b38      	ldr	r3, [pc, #224]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031be:	430a      	orrs	r2, r1
 80031c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80031c2:	4b37      	ldr	r3, [pc, #220]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4a3a      	ldr	r2, [pc, #232]	; (80032b0 <HAL_RCC_OscConfig+0x630>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	431a      	orrs	r2, r3
 80031d6:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031d8:	430a      	orrs	r2, r1
 80031da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	0449      	lsls	r1, r1, #17
 80031e6:	430a      	orrs	r2, r1
 80031e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fe fabd 	bl	8001768 <HAL_GetTick>
 80031ee:	0003      	movs	r3, r0
 80031f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fab8 	bl	8001768 <HAL_GetTick>
 80031f8:	0002      	movs	r2, r0
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e047      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	049b      	lsls	r3, r3, #18
 800320e:	4013      	ands	r3, r2
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x574>
 8003212:	e03f      	b.n	8003294 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003214:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800321a:	4924      	ldr	r1, [pc, #144]	; (80032ac <HAL_RCC_OscConfig+0x62c>)
 800321c:	400a      	ands	r2, r1
 800321e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fe faa2 	bl	8001768 <HAL_GetTick>
 8003224:	0003      	movs	r3, r0
 8003226:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322a:	f7fe fa9d 	bl	8001768 <HAL_GetTick>
 800322e:	0002      	movs	r2, r0
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e02c      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323c:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	049b      	lsls	r3, r3, #18
 8003244:	4013      	ands	r3, r2
 8003246:	d1f0      	bne.n	800322a <HAL_RCC_OscConfig+0x5aa>
 8003248:	e024      	b.n	8003294 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e01f      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	025b      	lsls	r3, r3, #9
 8003268:	401a      	ands	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	429a      	cmp	r2, r3
 8003270:	d10e      	bne.n	8003290 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	220f      	movs	r2, #15
 8003276:	401a      	ands	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d107      	bne.n	8003290 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	23f0      	movs	r3, #240	; 0xf0
 8003284:	039b      	lsls	r3, r3, #14
 8003286:	401a      	ands	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	b008      	add	sp, #32
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	40021000 	.word	0x40021000
 80032a4:	00001388 	.word	0x00001388
 80032a8:	efffffff 	.word	0xefffffff
 80032ac:	feffffff 	.word	0xfeffffff
 80032b0:	ffc2ffff 	.word	0xffc2ffff

080032b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0b3      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c8:	4b5b      	ldr	r3, [pc, #364]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2201      	movs	r2, #1
 80032ce:	4013      	ands	r3, r2
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d911      	bls.n	80032fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b58      	ldr	r3, [pc, #352]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2201      	movs	r2, #1
 80032dc:	4393      	bics	r3, r2
 80032de:	0019      	movs	r1, r3
 80032e0:	4b55      	ldr	r3, [pc, #340]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e8:	4b53      	ldr	r3, [pc, #332]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2201      	movs	r2, #1
 80032ee:	4013      	ands	r3, r2
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e09a      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2202      	movs	r2, #2
 8003300:	4013      	ands	r3, r2
 8003302:	d015      	beq.n	8003330 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2204      	movs	r2, #4
 800330a:	4013      	ands	r3, r2
 800330c:	d006      	beq.n	800331c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800330e:	4b4b      	ldr	r3, [pc, #300]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	4b4a      	ldr	r3, [pc, #296]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 8003314:	21e0      	movs	r1, #224	; 0xe0
 8003316:	00c9      	lsls	r1, r1, #3
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800331c:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	22f0      	movs	r2, #240	; 0xf0
 8003322:	4393      	bics	r3, r2
 8003324:	0019      	movs	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	4b44      	ldr	r3, [pc, #272]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2201      	movs	r2, #1
 8003336:	4013      	ands	r3, r2
 8003338:	d040      	beq.n	80033bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	4b3e      	ldr	r3, [pc, #248]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	029b      	lsls	r3, r3, #10
 800334a:	4013      	ands	r3, r2
 800334c:	d114      	bne.n	8003378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e06e      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335a:	4b38      	ldr	r3, [pc, #224]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	049b      	lsls	r3, r3, #18
 8003362:	4013      	ands	r3, r2
 8003364:	d108      	bne.n	8003378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e062      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336a:	4b34      	ldr	r3, [pc, #208]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2202      	movs	r2, #2
 8003370:	4013      	ands	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e05b      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003378:	4b30      	ldr	r3, [pc, #192]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2203      	movs	r2, #3
 800337e:	4393      	bics	r3, r2
 8003380:	0019      	movs	r1, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800338c:	f7fe f9ec 	bl	8001768 <HAL_GetTick>
 8003390:	0003      	movs	r3, r0
 8003392:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003394:	e009      	b.n	80033aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003396:	f7fe f9e7 	bl	8001768 <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	4a27      	ldr	r2, [pc, #156]	; (8003440 <HAL_RCC_ClockConfig+0x18c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e042      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	220c      	movs	r2, #12
 80033b0:	401a      	ands	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d1ec      	bne.n	8003396 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2201      	movs	r2, #1
 80033c2:	4013      	ands	r3, r2
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d211      	bcs.n	80033ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2201      	movs	r2, #1
 80033d0:	4393      	bics	r3, r2
 80033d2:	0019      	movs	r1, r3
 80033d4:	4b18      	ldr	r3, [pc, #96]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033dc:	4b16      	ldr	r3, [pc, #88]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2201      	movs	r2, #1
 80033e2:	4013      	ands	r3, r2
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e020      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2204      	movs	r2, #4
 80033f4:	4013      	ands	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a11      	ldr	r2, [pc, #68]	; (8003444 <HAL_RCC_ClockConfig+0x190>)
 80033fe:	4013      	ands	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800340c:	f000 f820 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8003410:	0001      	movs	r1, r0
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	220f      	movs	r2, #15
 800341a:	4013      	ands	r3, r2
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x194>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	000a      	movs	r2, r1
 8003422:	40da      	lsrs	r2, r3
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x198>)
 8003426:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003428:	2003      	movs	r0, #3
 800342a:	f7fe f957 	bl	80016dc <HAL_InitTick>
  
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b004      	add	sp, #16
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40022000 	.word	0x40022000
 800343c:	40021000 	.word	0x40021000
 8003440:	00001388 	.word	0x00001388
 8003444:	fffff8ff 	.word	0xfffff8ff
 8003448:	08003824 	.word	0x08003824
 800344c:	20000000 	.word	0x20000000

08003450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b08f      	sub	sp, #60	; 0x3c
 8003454:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003456:	2314      	movs	r3, #20
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	4a2b      	ldr	r2, [pc, #172]	; (8003508 <HAL_RCC_GetSysClockFreq+0xb8>)
 800345c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800345e:	c313      	stmia	r3!, {r0, r1, r4}
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003464:	1d3b      	adds	r3, r7, #4
 8003466:	4a29      	ldr	r2, [pc, #164]	; (800350c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003468:	ca13      	ldmia	r2!, {r0, r1, r4}
 800346a:	c313      	stmia	r3!, {r0, r1, r4}
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003474:	2300      	movs	r3, #0
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
 8003478:	2300      	movs	r3, #0
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
 800347c:	2300      	movs	r3, #0
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003484:	4b22      	ldr	r3, [pc, #136]	; (8003510 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	220c      	movs	r2, #12
 800348e:	4013      	ands	r3, r2
 8003490:	2b04      	cmp	r3, #4
 8003492:	d002      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0x4a>
 8003494:	2b08      	cmp	r3, #8
 8003496:	d003      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x50>
 8003498:	e02d      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <HAL_RCC_GetSysClockFreq+0xc4>)
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800349e:	e02d      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	0c9b      	lsrs	r3, r3, #18
 80034a4:	220f      	movs	r2, #15
 80034a6:	4013      	ands	r3, r2
 80034a8:	2214      	movs	r2, #20
 80034aa:	18ba      	adds	r2, r7, r2
 80034ac:	5cd3      	ldrb	r3, [r2, r3]
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	220f      	movs	r2, #15
 80034b6:	4013      	ands	r3, r2
 80034b8:	1d3a      	adds	r2, r7, #4
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80034be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	025b      	lsls	r3, r3, #9
 80034c4:	4013      	ands	r3, r2
 80034c6:	d009      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ca:	4812      	ldr	r0, [pc, #72]	; (8003514 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034cc:	f7fc fe1c 	bl	8000108 <__udivsi3>
 80034d0:	0003      	movs	r3, r0
 80034d2:	001a      	movs	r2, r3
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	4353      	muls	r3, r2
 80034d8:	637b      	str	r3, [r7, #52]	; 0x34
 80034da:	e009      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034de:	000a      	movs	r2, r1
 80034e0:	0152      	lsls	r2, r2, #5
 80034e2:	1a52      	subs	r2, r2, r1
 80034e4:	0193      	lsls	r3, r2, #6
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	185b      	adds	r3, r3, r1
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80034f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034f4:	e002      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b00f      	add	sp, #60	; 0x3c
 8003504:	bd90      	pop	{r4, r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	08003744 	.word	0x08003744
 800350c:	08003754 	.word	0x08003754
 8003510:	40021000 	.word	0x40021000
 8003514:	007a1200 	.word	0x007a1200

08003518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	025b      	lsls	r3, r3, #9
 8003530:	4013      	ands	r3, r2
 8003532:	d100      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003534:	e08e      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003536:	2017      	movs	r0, #23
 8003538:	183b      	adds	r3, r7, r0
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353e:	4b5f      	ldr	r3, [pc, #380]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	055b      	lsls	r3, r3, #21
 8003546:	4013      	ands	r3, r2
 8003548:	d110      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	4b5c      	ldr	r3, [pc, #368]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	4b5b      	ldr	r3, [pc, #364]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	0549      	lsls	r1, r1, #21
 8003554:	430a      	orrs	r2, r1
 8003556:	61da      	str	r2, [r3, #28]
 8003558:	4b58      	ldr	r3, [pc, #352]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	055b      	lsls	r3, r3, #21
 8003560:	4013      	ands	r3, r2
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003566:	183b      	adds	r3, r7, r0
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	4b54      	ldr	r3, [pc, #336]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4013      	ands	r3, r2
 8003576:	d11a      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003578:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b50      	ldr	r3, [pc, #320]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800357e:	2180      	movs	r1, #128	; 0x80
 8003580:	0049      	lsls	r1, r1, #1
 8003582:	430a      	orrs	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7fe f8ef 	bl	8001768 <HAL_GetTick>
 800358a:	0003      	movs	r3, r0
 800358c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	e008      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003590:	f7fe f8ea 	bl	8001768 <HAL_GetTick>
 8003594:	0002      	movs	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e087      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4013      	ands	r3, r2
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ae:	4b43      	ldr	r3, [pc, #268]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035b0:	6a1a      	ldr	r2, [r3, #32]
 80035b2:	23c0      	movs	r3, #192	; 0xc0
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4013      	ands	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d034      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	23c0      	movs	r3, #192	; 0xc0
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4013      	ands	r3, r2
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d02c      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035d0:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	4a3b      	ldr	r2, [pc, #236]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035da:	4b38      	ldr	r3, [pc, #224]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035dc:	6a1a      	ldr	r2, [r3, #32]
 80035de:	4b37      	ldr	r3, [pc, #220]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035e0:	2180      	movs	r1, #128	; 0x80
 80035e2:	0249      	lsls	r1, r1, #9
 80035e4:	430a      	orrs	r2, r1
 80035e6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035e8:	4b34      	ldr	r3, [pc, #208]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035ea:	6a1a      	ldr	r2, [r3, #32]
 80035ec:	4b33      	ldr	r3, [pc, #204]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035ee:	4936      	ldr	r1, [pc, #216]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035f0:	400a      	ands	r2, r1
 80035f2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035f4:	4b31      	ldr	r3, [pc, #196]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	4013      	ands	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003602:	f7fe f8b1 	bl	8001768 <HAL_GetTick>
 8003606:	0003      	movs	r3, r0
 8003608:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360a:	e009      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fe f8ac 	bl	8001768 <HAL_GetTick>
 8003610:	0002      	movs	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	4a2d      	ldr	r2, [pc, #180]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e048      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003620:	4b26      	ldr	r3, [pc, #152]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	2202      	movs	r2, #2
 8003626:	4013      	ands	r3, r2
 8003628:	d0f0      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4a25      	ldr	r2, [pc, #148]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003630:	4013      	ands	r3, r2
 8003632:	0019      	movs	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800363a:	430a      	orrs	r2, r1
 800363c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800363e:	2317      	movs	r3, #23
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d105      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003648:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800364e:	4920      	ldr	r1, [pc, #128]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003650:	400a      	ands	r2, r1
 8003652:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2201      	movs	r2, #1
 800365a:	4013      	ands	r3, r2
 800365c:	d009      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	2203      	movs	r2, #3
 8003664:	4393      	bics	r3, r2
 8003666:	0019      	movs	r1, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800366e:	430a      	orrs	r2, r1
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2220      	movs	r2, #32
 8003678:	4013      	ands	r3, r2
 800367a:	d009      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	2210      	movs	r2, #16
 8003682:	4393      	bics	r3, r2
 8003684:	0019      	movs	r1, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800368c:	430a      	orrs	r2, r1
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4013      	ands	r3, r2
 800369a:	d009      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	2240      	movs	r2, #64	; 0x40
 80036a2:	4393      	bics	r3, r2
 80036a4:	0019      	movs	r1, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036ac:	430a      	orrs	r2, r1
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	0018      	movs	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b006      	add	sp, #24
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40007000 	.word	0x40007000
 80036c4:	fffffcff 	.word	0xfffffcff
 80036c8:	fffeffff 	.word	0xfffeffff
 80036cc:	00001388 	.word	0x00001388
 80036d0:	efffffff 	.word	0xefffffff

080036d4 <__libc_init_array>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	2600      	movs	r6, #0
 80036d8:	4d0c      	ldr	r5, [pc, #48]	; (800370c <__libc_init_array+0x38>)
 80036da:	4c0d      	ldr	r4, [pc, #52]	; (8003710 <__libc_init_array+0x3c>)
 80036dc:	1b64      	subs	r4, r4, r5
 80036de:	10a4      	asrs	r4, r4, #2
 80036e0:	42a6      	cmp	r6, r4
 80036e2:	d109      	bne.n	80036f8 <__libc_init_array+0x24>
 80036e4:	2600      	movs	r6, #0
 80036e6:	f000 f821 	bl	800372c <_init>
 80036ea:	4d0a      	ldr	r5, [pc, #40]	; (8003714 <__libc_init_array+0x40>)
 80036ec:	4c0a      	ldr	r4, [pc, #40]	; (8003718 <__libc_init_array+0x44>)
 80036ee:	1b64      	subs	r4, r4, r5
 80036f0:	10a4      	asrs	r4, r4, #2
 80036f2:	42a6      	cmp	r6, r4
 80036f4:	d105      	bne.n	8003702 <__libc_init_array+0x2e>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	00b3      	lsls	r3, r6, #2
 80036fa:	58eb      	ldr	r3, [r5, r3]
 80036fc:	4798      	blx	r3
 80036fe:	3601      	adds	r6, #1
 8003700:	e7ee      	b.n	80036e0 <__libc_init_array+0xc>
 8003702:	00b3      	lsls	r3, r6, #2
 8003704:	58eb      	ldr	r3, [r5, r3]
 8003706:	4798      	blx	r3
 8003708:	3601      	adds	r6, #1
 800370a:	e7f2      	b.n	80036f2 <__libc_init_array+0x1e>
 800370c:	08003834 	.word	0x08003834
 8003710:	08003834 	.word	0x08003834
 8003714:	08003834 	.word	0x08003834
 8003718:	08003838 	.word	0x08003838

0800371c <memset>:
 800371c:	0003      	movs	r3, r0
 800371e:	1882      	adds	r2, r0, r2
 8003720:	4293      	cmp	r3, r2
 8003722:	d100      	bne.n	8003726 <memset+0xa>
 8003724:	4770      	bx	lr
 8003726:	7019      	strb	r1, [r3, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	e7f9      	b.n	8003720 <memset+0x4>

0800372c <_init>:
 800372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003732:	bc08      	pop	{r3}
 8003734:	469e      	mov	lr, r3
 8003736:	4770      	bx	lr

08003738 <_fini>:
 8003738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373e:	bc08      	pop	{r3}
 8003740:	469e      	mov	lr, r3
 8003742:	4770      	bx	lr
